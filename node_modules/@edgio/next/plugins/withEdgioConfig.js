"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withEdgioConfig = void 0;
const getNextVersion_1 = __importDefault(require("../util/getNextVersion"));
const getServerBuildAvailability_1 = require("../util/getServerBuildAvailability");
const isTargetSupported_1 = __importDefault(require("../util/isTargetSupported"));
const CommonsServerChunkPlugin_1 = __importDefault(require("../webpack/CommonsServerChunkPlugin"));
const core_1 = require("@edgio/core");
const determineTarget = ({ useServerBuild, target, }) => {
    /* istanbul ignore next */
    if (useServerBuild)
        return 'server';
    return target === 'serverless' ? 'serverless' : 'experimental-serverless-trace';
};
/**
 * A Next.js plugin that adds Edgio specific configuration to a Next.js config.
 * This plugin sets:
 * - target based on used next version
 * - default output directory
 * - CommonsServerChunkPlugin for serverless target
 * - imageOptimizer allowed domains
 * @param _nextConfig A next.js config
 * @return A next.js config
 */
function withEdgioConfig(_nextConfig) {
    const edgioConfig = (0, core_1.getConfig)();
    const normalizedNextConfig = typeof _nextConfig === 'function' ? _nextConfig : () => _nextConfig || {};
    const plugin = (...args) => {
        const nextConfig = normalizedNextConfig(...args);
        const { useServerBuild, standaloneBuildConfig } = (0, getServerBuildAvailability_1.getServerBuildAvailability)({
            config: nextConfig,
            quiet: true,
        });
        const result = {
            ...nextConfig,
            ...standaloneBuildConfig,
            experimental: {
                ...nextConfig.experimental,
                ...standaloneBuildConfig.experimental,
            },
            webpack: (config, options) => {
                var _a, _b, _c;
                const webpackConfig = { ...(((_a = nextConfig.webpack) === null || _a === void 0 ? void 0 : _a.call(nextConfig, config, options)) || config) };
                if (options.webpack.version.startsWith('5')) {
                    Object.assign(config, {
                        resolve: {
                            ...config.resolve,
                            fallback: {
                                ...(_b = config.resolve) === null || _b === void 0 ? void 0 : _b.fallback,
                                process: false,
                            },
                        },
                    });
                }
                if (options.isServer &&
                    (options.nextRuntime == null || options.nextRuntime === 'nodejs') && // make sure we aren't building middelware (options.nextRuntime === 'edge') or this will break
                    process.env.NODE_ENV === 'production') {
                    if ((_c = edgioConfig === null || edgioConfig === void 0 ? void 0 : edgioConfig.next) === null || _c === void 0 ? void 0 : _c.generateSourceMaps) {
                        // We force the 'source-map' value as this is what we expect to consume on
                        // our lambda infrastructure
                        config.devtool = 'source-map';
                    }
                    if (!useServerBuild) {
                        config.plugins.push(new CommonsServerChunkPlugin_1.default());
                        config.output.chunkFilename = '[name].js';
                        config.optimization.splitChunks = {
                            cacheGroups: {
                                default: false,
                                vendors: false,
                                commons: {
                                    // Note that the name of the chunk is very important.  If the name doesn't include "webpack-runtime",
                                    // Next.js's PagesManifestPlugin will fail to include each page in the server build's pages-manifest.json
                                    // and the build will fail with an error like "module not found for page /".
                                    // See this line in PagesManifestPlugin:
                                    // https://github.com/vercel/next.js/blob/210a6980d2d630e0ed7c67552a6ebf96921dac15/packages/next/build/webpack/plugins/pages-manifest-plugin.ts#L38
                                    name: 'webpack-runtime-commons',
                                    reuseExistingChunk: true,
                                    minChunks: 1,
                                    chunks: 'all',
                                    test: /node_modules/,
                                },
                            },
                        };
                    }
                }
                return Object.assign(webpackConfig, config);
            },
        };
        if ((0, isTargetSupported_1.default)((0, getNextVersion_1.default)())) {
            result.target = determineTarget({ useServerBuild, target: nextConfig.target });
        }
        return result;
    };
    return typeof _nextConfig === 'function' ? plugin : plugin();
}
exports.withEdgioConfig = withEdgioConfig;
