"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withImageDomainsConfig = void 0;
const getNextVersion_1 = __importDefault(require("../util/getNextVersion"));
const semver_1 = require("semver");
/**
 * A Next.js plugin that adds allowed domains for Next's Image Optimizer into next-config.
 * This is needed for the Image Optimizer to work in lambda, because images are served from
 * S3 and not from the local filesystem.
 * @param _nextConfig A next.js config
 * @return A next.js config
 */
function withImageDomainsConfig(_nextConfig) {
    const normalizedNextConfig = typeof _nextConfig === 'function' ? _nextConfig : () => _nextConfig || {};
    const plugin = (...args) => {
        var _a, _b, _c, _d, _e, _f;
        const nextConfig = normalizedNextConfig(...args);
        const nextVersion = (0, getNextVersion_1.default)() || '0.0.0';
        // Remote patterns expect just hostname without port
        // and images.domains expect hostname including port if it's not 80 or 443.
        // That's why we need to include all possible combinations of domains
        // that can user use locally to access the app.
        const predefinedDomains = [
            'SET_EDGIO_PERMALINK_HOST_HERE',
            '127.0.0.1',
            'localhost',
            '127.0.0.1:3000',
            'localhost:3000',
        ];
        const predefinedRemotePatterns = predefinedDomains.map(domain => ({
            hostname: domain,
        }));
        // Add allowed domains to config for next's image optimizer to work.
        // NOTE: The image.domains option is deprecated since Next.js 14,
        // so we need to use image.remotePatterns instead
        // but this option was added in Next.js 12.0.0.
        if ((0, semver_1.satisfies)(nextVersion, '>=12.0.0')) {
            return {
                ...nextConfig,
                images: {
                    ...((_a = nextConfig.images) !== null && _a !== void 0 ? _a : {}),
                    remotePatterns: [
                        ...predefinedRemotePatterns,
                        ...((_c = (_b = nextConfig.images) === null || _b === void 0 ? void 0 : _b.remotePatterns) !== null && _c !== void 0 ? _c : []),
                    ],
                },
            };
        }
        else {
            return {
                ...nextConfig,
                images: {
                    ...((_d = nextConfig.images) !== null && _d !== void 0 ? _d : {}),
                    domains: [...predefinedDomains, ...((_f = (_e = nextConfig.images) === null || _e === void 0 ? void 0 : _e.domains) !== null && _f !== void 0 ? _f : [])],
                },
            };
        }
    };
    return typeof _nextConfig === 'function' ? plugin : plugin();
}
exports.withImageDomainsConfig = withImageDomainsConfig;
