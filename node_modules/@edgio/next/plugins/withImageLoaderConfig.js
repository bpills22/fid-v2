"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceBuiltInImageLoader = exports.withImageLoaderConfig = void 0;
const core_1 = require("@edgio/core");
const path_1 = require("path");
const environment_1 = require("@edgio/core/environment");
const getNextVersion_1 = __importDefault(require("../util/getNextVersion"));
const semver_1 = require("semver");
const resolve_package_path_1 = __importDefault(require("resolve-package-path"));
const fs_1 = require("fs");
/**
 * A Next.js plugin that adds our image loader into next-config.
 * This loader replaces Next's image optimizer with our Edgio Image Optimizer.
 * It generates URLs for images (when <Image> component from next/image is used)
 * together with correct params.
 *
 * NOTE: Next's image optimizer on /_next/image path is disabled
 * when there's other than default image loader defined in next.config.js.
 *
 * @param _nextConfig A next.js config
 * @return A next.js config
 */
function withImageLoaderConfig(_nextConfig) {
    const normalizedNextConfig = typeof _nextConfig === 'function' ? _nextConfig : () => _nextConfig || {};
    const plugin = (...args) => {
        var _a, _b, _c, _d;
        const edgioConfig = (0, core_1.getConfig)();
        const nextConfig = normalizedNextConfig(...args);
        const nextVersion = (0, getNextVersion_1.default)() || '0.0.0';
        const disableImageOptimizer = (_a = edgioConfig === null || edgioConfig === void 0 ? void 0 : edgioConfig.next) === null || _a === void 0 ? void 0 : _a.disableImageOptimizer;
        const imageLoader = (_b = nextConfig.images) === null || _b === void 0 ? void 0 : _b.loader;
        // Do not add our image loader if we're in development mode,
        // Edgio Image Optimizer is disabled or
        // there's already a custom image loader defined in next.config.js
        // NOTE: This is needed because Next.js disables its built-in image optimizer
        // when there's other than default image loader defined in next.config.js.
        if ((!(0, environment_1.isCloud)() && !(0, environment_1.isProductionBuild)()) || imageLoader || disableImageOptimizer) {
            return nextConfig;
        }
        // The images.loaderFile config option is supported since Next.js 13.
        if ((0, semver_1.satisfies)(nextVersion, '>= 13.0.0')) {
            // The path needs to be relative to the project root, otherwise Next.js will throw an error.
            const imageLoaderPath = (0, path_1.relative)(process.cwd(), (0, path_1.resolve)(__dirname, '..', 'imageLoader.js'));
            return {
                ...nextConfig,
                images: {
                    ...((_c = nextConfig.images) !== null && _c !== void 0 ? _c : {}),
                    loader: 'custom',
                    loaderFile: imageLoaderPath,
                },
            };
        }
        else {
            // The older versions 10,11 etc... support only built-in loaders such as 'akamai', 'cloudinary' etc...
            // That's why need to do this 'hack' and add our image loader directly into next's source code.
            replaceBuiltInImageLoader();
            return {
                ...nextConfig,
                images: {
                    ...((_d = nextConfig.images) !== null && _d !== void 0 ? _d : {}),
                    path: '/',
                    loader: 'imgix',
                },
            };
        }
    };
    return typeof _nextConfig === 'function' ? plugin : plugin();
}
exports.withImageLoaderConfig = withImageLoaderConfig;
/**
 * This function modifies a source code of Next.js
 * and adds our image loader instead of built-in image loader in next/image.
 * This is needed to pass the next.config.js validation that is done on several places.
 */
function replaceBuiltInImageLoader() {
    const packageJsonPath = (0, resolve_package_path_1.default)('next', process.cwd()) || './';
    const packagePath = (0, path_1.dirname)(packageJsonPath);
    const nextImagePath = (0, path_1.resolve)(packagePath, 'dist', 'client', 'image.js');
    const nextImageOriginalPath = (0, path_1.resolve)(packagePath, 'dist', 'client', 'image.original.js');
    if (!(0, fs_1.existsSync)(nextImagePath))
        return;
    const nextImageModuleContent = (0, fs_1.readFileSync)(nextImagePath, 'utf-8');
    // Do not add our loader if it's already there.
    if (nextImageModuleContent.includes('@edgio/next/imageLoader'))
        return;
    // Make a backup of the original file.
    (0, fs_1.copyFileSync)(nextImagePath, nextImageOriginalPath);
    // Add our image loader instead of built-in image loader in next-server/client/image.js
    // Example:
    // const loaders = new Map([['edgio', require('@edgio/next/imageLoader').default], ['cloudinary', cloudinaryLoader], ['akamai', akamaiLoader], ['default', defaultLoader]]);
    (0, fs_1.writeFileSync)(nextImagePath, nextImageModuleContent.replace(/(\[\s*['"]imgix['"]\s*,\s*imgixLoader\s*\])/im, `['imgix', require('@edgio/next/imageLoader').default]`));
}
exports.replaceBuiltInImageLoader = replaceBuiltInImageLoader;
