"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore file */
const deploy_1 = require("@edgio/core/deploy");
const createDevServer_1 = __importDefault(require("@edgio/core/dev/createDevServer"));
const constants_1 = require("./constants");
const fs_1 = require("fs");
const path_1 = require("path");
const core_1 = require("@edgio/core");
const getNextVersion_1 = __importDefault(require("./util/getNextVersion"));
const getNodeOptions_1 = __importDefault(require("./util/getNodeOptions"));
const NextConfigBuilder_1 = __importDefault(require("./build/NextConfigBuilder"));
const paths_1 = require("@edgio/core/deploy/paths");
const monorepoUtils_1 = require("@edgio/core/utils/monorepoUtils");
const process = __importStar(require("node:process"));
const edgioConfig = (0, core_1.getConfig)();
const turbopack = (_b = (_a = edgioConfig === null || edgioConfig === void 0 ? void 0 : edgioConfig.next) === null || _a === void 0 ? void 0 : _a.turbopack) !== null && _b !== void 0 ? _b : false;
const nextVersion = (0, getNextVersion_1.default)();
const monorepoRoot = (0, monorepoUtils_1.findMonorepoRoot)() || process.cwd();
const nextRootDir = (0, path_1.relative)(monorepoRoot, process.cwd());
const pagesDir = (0, fs_1.existsSync)((0, path_1.resolve)('src', 'pages')) ? (0, path_1.resolve)('src', 'pages') : (0, path_1.resolve)('pages');
const appDir = (0, fs_1.existsSync)((0, path_1.resolve)('src', 'app')) ? (0, path_1.resolve)('src', 'app') : (0, path_1.resolve)('app');
// There's no need to reload router when proxyToServerlessByDefault is enabled,
// because we have just one rule in this case.
const dirsToWatch = (edgioConfig === null || edgioConfig === void 0 ? void 0 : edgioConfig.proxyToServerlessByDefault) === false ||
    ((_c = edgioConfig === null || edgioConfig === void 0 ? void 0 : edgioConfig.next) === null || _c === void 0 ? void 0 : _c.proxyToServerlessByDefault) === false
    ? [pagesDir, appDir]
    : [];
async function dev() {
    // @ts-ignore
    global.EDGIO_NEXT_APP = require('next')({ dev: true });
    // Build next.config.js file, so we can later load it in NextRoutes.
    // NOTE: Next.config can be for example Typescript file, so that's why.
    await new NextConfigBuilder_1.default(process.cwd(), (0, path_1.resolve)(paths_1.JS_APP_DIR), {
        nextRootDir,
        skipNodeModules: true,
    }).build();
    await new deploy_1.DeploymentBuilder().watchServiceWorker(constants_1.SERVICE_WORKER_SOURCE_PATH);
    return (0, createDevServer_1.default)({
        label: 'Next',
        command: port => `npx next dev -p ${port} ${turbopack ? '--turbopack' : ''}`,
        env: {
            // We need to add these special NODE_OPTIONS to the build command
            // as a workaround for Next.js 10 and older versions on Node 18.
            // Otherwise, the dev server fails with error: "error:0308010C:digital envelope routines::unsupported"
            NODE_OPTIONS: (0, getNodeOptions_1.default)(nextVersion || '0.0.0'),
        },
        ready: [/(started server on|ready on|ready in)/i],
        // The whole Router will be reloaded if any of these dirs change.
        reloadOnChangeOf: dirsToWatch,
    });
}
exports.default = dev;
