/**
 *  NextConfigBuilder creates the buildtime version and runtime version of next.config.js file.
 *  The runtime version is the original version of next.config.js file.
 *
 *  This nextConfigHandler serves Next config.
 *  For performance reason when no publicRuntimeConfig or serverRuntimeConfig property is presented,
 *  only the buildtime version of config is returned, otherwise the runtime version is evaluated
 *  and publicRuntimeConfig and serverRuntimeConfig properties added.
 */
export default class NextConfigBuilder {
    protected srcDir: string;
    protected srcFile: string;
    protected destDir: string;
    protected generateSourceMap: boolean;
    protected nextConfig?: any;
    protected nextRootDir: string;
    protected fileTracingRootDir: string;
    protected skipNodeModules: boolean;
    constructor(srcDir: string, destDir: string, options?: {
        nextRootDir?: string;
        nextConfig?: any;
        generateSourceMap?: boolean;
        skipNodeModules?: boolean;
    });
    /**
     * Returns the list of next.config.js file dependencies
     * such as imported modules, json files, native modules etc...
     * We cannot just bundle them, because some of them might have dynamic imports,
     * ESM syntax not convertible to CJS, etc...
     * and we need to trace them to the root of the project.
     * For example: @next/bundle-analyzer depends on SWC binaries.
     * @return
     */
    protected getDependencies(): Promise<string[]>;
    /**
     * Copies the dependencies to lambda folder
     * @return
     */
    protected copyDependencies(dependencies: string[]): Promise<void>;
    /**
     * Compiles TS dependencies to JS
     */
    protected compileTs(srcFile: string): Promise<void>;
    /**
     * Creates the file with runtime version of next.config.js.
     * This file is same as the original one.
     * @return
     */
    protected writeRuntimeVersion(): Promise<void>;
    /**
     * Creates the file with buildtime version of next.config.js.
     * Thi file captures the next.config.js content at build time.
     * @return
     */
    protected writeBuildtimeVersion(): Promise<void>;
    /**
     * Creates the file with our handler which will return the next config
     * either from captured buildtime version or runtime version.
     * @return
     */
    writeFinalVersion(): Promise<void>;
    /**
     * Executes the build of next config file and bundle nextConfigHandler together with buildtime version of next.config.js.
     * Then clean after ourselves.
     * @return
     */
    build(): Promise<void>;
    /**
     * Adds file with nextRootDir to the lambda directory,
     * so we know where to look for the next project files, next.config.js etc...
     * This is needed for the projects in NPM/YARN workspaces.
     */
    addNextRootDirFile(): void;
    /**
     * Removes the unused files after the build
     * @return
     */
    protected cleanAfterBuild(): void;
}
