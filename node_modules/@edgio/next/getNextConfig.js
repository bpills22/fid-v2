"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore file */
const path_1 = require("path");
const fs_1 = require("fs");
const paths_1 = require("@edgio/core/deploy/paths");
const utils_1 = require("@edgio/core/utils");
/**
 * Gets the data in next.config.js
 * @param nextRootDir The root directory of the app, defaults to the current working directory
 * @param filename The name of the next.config.js file, defaults to 'next.config.js'
 * @returns
 */
function getNextConfig(nextRootDir = './', filename = 'next.config.js') {
    const configFile = [
        // Try to use next.config.js file from the app directory first if it's available.
        // For example:
        // ./next.config.js
        (0, path_1.resolve)(nextRootDir, filename),
        (0, path_1.resolve)(nextRootDir, filename.replace('.js', '.cjs')),
        // If no compatible next.config.js|cjs file is found in the app directory,
        // use built next.config.js file from the .edgio/app directory.
        // This file is re-build by NextConfigBuilder on each edgio dev/build command call.
        // We'll get here if project uses TypeScript/ESM with next.config.ts/mjs file
        // and we cannot load the file directly or in sync way.
        // For example:
        // .edgio/lambda/app/next.config.js
        // .edgio/lambda/app/project/packages/next/next.config.js
        (0, path_1.resolve)(paths_1.JS_APP_DIR, nextRootDir, filename),
        (0, path_1.resolve)(paths_1.JS_APP_DIR, nextRootDir, filename.replace('.js', '.cjs')),
    ].find(fs_1.existsSync);
    if (!configFile) {
        return {};
    }
    try {
        const module = (0, utils_1.nonWebpackRequire)(configFile);
        const config = module.default || module;
        if (typeof config === 'function') {
            return config('phase-production-build', {});
        }
        return config;
    }
    catch (e) {
        // Dummy way to detect that the error is caused by importing ESM module inside CJS project,
        // so we can give user better error message WITH instructions how to fix it.
        if (e.message.includes('Cannot use import statement outside a module') ||
            e.message.includes("Unexpected token 'export'")) {
            throw new Error(`Edgio failed to load '${configFile}' file. \r\nThe loading of ESM module in CommonJS context is not supported. ` +
                `Please rename your next.config.cjs|js file to next.config.mjs if you want to use ESM module ` +
                `or convert the file to CJS module by using module.exports = {...} syntax.`);
        }
        // Re-throw everything else
        throw e;
    }
}
exports.default = getNextConfig;
