import NextPathFormatter from './nextPathFormatter';
import { RouterPlugin } from '@edgio/core/router/Router';
import Router from '@edgio/core/router/Router';
import RouteCriteria from '@edgio/core/router/RouteCriteria';
import { FeatureCreator } from '@edgio/core/router/RouteHelper';
import ManifestParser from './ManifestParser';
import { RenderMode, Page, ExtendedConfig } from '../types';
import Request from '@edgio/core/runtime/Request';
import { Middleware, NextConfig, Redirect, SSRHandlerOptions } from '../next.types';
export default class NextRoutes implements RouterPlugin {
    protected router?: Router;
    protected nextRootDir: string;
    protected defaultLocale?: string;
    protected locales: string[];
    protected redirects: Redirect[];
    protected pages: Page[];
    protected pagesMap: {
        [key: string]: Page;
    };
    protected middlewares: Middleware[];
    protected distDir: string;
    protected buildId: string;
    protected previewModeId: string | undefined;
    protected nextConfig: NextConfig;
    protected edgioConfig: ExtendedConfig;
    protected nextPathFormatter: NextPathFormatter;
    protected manifestParser: ManifestParser;
    protected renderMode: RenderMode;
    protected ssrOptions: SSRHandlerOptions;
    /**
     * Provides next registered routes to router
     * @param nextRootDir The root directory for the Next.js app
     */
    constructor(nextRootDir?: string);
    /**
     * Called when plugin is registered
     * @param router The router to which the plugin has been added.
     */
    onRegister(router: Router): void;
    /**
     * Adds rules for pre-rendered pages
     */
    protected addPrerenderedPages(): void;
    /**
     * Adds rules with handler for all SSR, ISG, ISR pages
     */
    protected addPages(): void;
    /**
     * Adds rules which serves static HTML 404 error page
     * for all not prerendered routes which has fallback: false.
     */
    protected add404ErrorPages(): void;
    /**
     * Logs provided route with label and other params
     * to the console during the build.
     * @param page
     * @param route
     * @param label
     * @param initialRevalidateSeconds
     * @returns
     */
    logRoute(page: Page, route: string, label: string, initialRevalidateSeconds?: number | boolean): void;
    /**
     * Logs a pages with their data routes
     * and prerendered routes to the console during the build.
     * @returns
     */
    logPages(): void;
    /**
     * Outputs a message to the console during the build.
     * @param message
     * @returns
     */
    logDuringBuild(message: string): void;
    /**
     * Adds redirects from next.config.js
     */
    protected addRedirects(): void;
    /**
     * Creates a Edgio RouteCriteria from path and has attributes found in rewrites in redirects
     * in next.config.js.
     * @param path The path pattern
     * @param has Has elements from next.config.js rewrites and redirects.
     * @returns
     */
    protected createRouteCriteria(path: string, has?: any[]): string | RouteCriteria;
    /**
     * Adds routes for static assets in /public
     */
    protected addPublicAssets(): void;
    /**
     * Adds routes for static assets of /.next/static
     */
    protected addAssets(): void;
    /**
     * Adds route for preview mode,
     * that bypasses cache, overrides origin for pre-rendered pages
     * and sets it to serverless when "__bypass-prerender" and "__preview_data" cookies are present.
     */
    protected addPreviewModeRoute(): void;
    /**
     * Adds rule that enables image optimization for supported image types.
     */
    protected addImageOptimization(): void;
    /**
     * Adds routes for Image Optimizer:
     * - Edgio Image Proxy
     * - Next Image Optimizer
     */
    protected addImageOptimizerRoutes(): void;
    /**
     * Adds route for next image-optimizer when app run in production mode
     */
    protected addNextImageOptimizerRoutes(): void;
    /**
     * Adds route that will proxy images from remote hosts,
     * so they can be later optimized by Sailfish's image-optimizer,
     * and cached on the edge. This approach works even with old serverless builds
     * without Next's image-optimizer. This rule is used by our imageLoader.
     */
    protected addEdgioImageProxyRoutes(): void;
    /**
     * Adds route with service worker file.
     * This route is used in both production and development modes.
     */
    protected addServiceWorker(): void;
    /**
     * By default, we send all requests to Next SSR running in serverless.
     * Subsequent static routes will overwrite this and use either edgio_serverless or edgio_serverless_static origins.
     */
    protected addDefaultSSRRoute(): void;
    /**
     * Sets the SSR handler options that will be used when proxying requests to the Next SSR handler in serverless mode.
     */
    setSSROptions(options: SSRHandlerOptions): this;
    /**
     * The FeatureCreator which proxies all requests to Next in serverless.
     */
    protected ssrHandler: FeatureCreator;
    /**
     * Adds prerendering to pull all SSG pages into the edge cache.
     */
    protected addPrerendering(): void;
    /**
     * This method is executed before the request is proxied to Next.js in serverless mode.
     * It adds the page params to the query string, so they are correctly parsed under req.params.
     * Without this function the params under context.params would be empty
     * and only available under req.query on SSR pages.
     * @param req
     */
    protected addPageParamsToQuery(req: Request): void;
    /**
     * Adds leading basePath property from next.config.js to path
     * in case it's specified
     * @param path
     */
    protected addBasePath(path: string): string;
    /**
     * Set this option to true to honor Next's internal redirects that either add or remove a trailing slash
     * depending on the value of the `trailingSlash` config. When set to false, these internal redirects are not honored,
     * so sites that fallback to serving from an origin do not add or remove the trailing slash for origin URLs.
     * @param value
     * @deprecated
     */
    setEnforceTrailingSlash(value: boolean): this;
}
