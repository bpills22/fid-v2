export default class NextPathFormatter {
    private nextConfig;
    /**
     * Provides formatting functions for next paths
     * @param nextConfig The configuration of next
     */
    constructor(nextConfig: any);
    /**
     * Removes extensions and index from next path
     *
     * @param pagePath The next page path, for example /products/[id]
     * @example
     * /index.js => /
     * /main.html => /main
     */
    toCleanPath: (pagePath: string) => string;
    /**
     * Converts next path to express route syntax
     * @example
     * /[param1]/[param2] => /:param1/:param2
     * /[...path] => /:path*
     * @param pagePath The next page path, for example /products/[id]
     */
    toRouteSyntax: (pagePath: string) => string;
    localize(locales: string[], route: string): string;
    /**
     * Generates dataRoute from page name
     * @returns
     */
    getDataRoute(pageName: string, buildId?: string): string;
    /**
     * Generates route and dataRoute in regex-to-path format from page name
     * and returns object with localized variations of them.
     * @returns
     */
    getRouteVariations(pageName: string, { buildId, locales }?: {
        buildId?: string;
        locales?: string[];
    }): {
        route: string;
        localizedRoute: string;
        dataRoute: string;
        localizedDataRoute: string;
    };
}
