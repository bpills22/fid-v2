import NextPathFormatter from './nextPathFormatter';
import { RenderMode, Page, PageType, PageSourceType, FallbackType, PrerenderedRoute } from '../types';
import { MiddlewareManifest, PrerenderManifest, RoutesManifest, PagesManifest, AppPathsManifest, DataRoute, Redirect, NextConfig, Middleware } from '../next.types';
export default class ManifestParser {
    protected routesManifest?: RoutesManifest;
    protected prerenderManifest?: PrerenderManifest;
    protected middlewareManifest?: MiddlewareManifest;
    protected pagesManifest: PagesManifest;
    protected appPathsManifest: AppPathsManifest;
    protected pageFiles: PagesManifest | AppPathsManifest;
    protected nextRootDir: string;
    protected distDir: string;
    protected pagesDir: string;
    protected appDir: string;
    protected renderMode: RenderMode;
    protected locales: string[];
    protected defaultLocale?: string;
    protected nextPathFormatter: NextPathFormatter;
    protected buildId: string;
    protected nextConfig: NextConfig;
    /**
     * @param nextRootDir The path to project root
     * @param distDir The name of dist folder
     * @param renderMode The render mode
     */
    constructor(nextRootDir: string, distDir: string, renderMode: RenderMode);
    /**
     * Returns the objects of parsed pages
     * @param includeTemplates
     */
    getPages(includeTemplates?: boolean): Page[];
    /**
     * Returns the objects of parsed extracted from
     * the pages and app directory because there is no manifest file.
     * Pages in development mode are not pre-rendered and all marked as SSR.
     * @param includeTemplates
     */
    protected getPagesInDev(includeTemplates?: boolean): Page[];
    /**
     * Returns the objects of parsed pages
     * extracted from the manifest files.
     * @param includeTemplates
     */
    protected getPagesInProd(includeTemplates?: boolean): Page[];
    /**
     * Attempt to get redirects from routes-manifest.json in production
     * and from next.config.js in development.
     */
    getRedirects(): Redirect[];
    /**
     * Returns middlewares from middleware-manifest.json
     */
    getMiddlewares(): Middleware[];
    /**
     * Returns page type based on it's properties
     * @param page
     */
    getPageType(page: Page): PageType;
    /**
     * Returns fallback type based on value from dynamicRoutes.
     * @param pageName
     */
    getFallbackType(pageName: string): FallbackType | undefined;
    /**
     * Returns page source type. Can be located in 'app' or 'pages' folder.
     * @param pageName
     */
    getPageSourceType(pageName: string): PageSourceType | undefined;
    /**
     * Returns the contents of routes-manifest.json
     */
    getRoutesManifest(): RoutesManifest | undefined;
    /**
     * Returns the contents of pages-manifest.json
     */
    getPagesManifest(): PagesManifest;
    /**
     * Returns the content of app-paths-manifest.json
     * and changes the format of keys to correct URLs
     */
    getAppPathsManifest(): AppPathsManifest;
    /**
     * Returns the contents of middleware-manifest.json
     */
    getMiddlewareManifest(): MiddlewareManifest;
    /**
     * Returns the contents of prerender-manifest.json
     */
    getPrerenderManifest(): PrerenderManifest;
    /**
     * Returns true if page path is dynamic
     * @param pageNameWithoutLocale
     */
    isDynamic(pageNameWithoutLocale: string): boolean;
    /**
     * Returns true if the specified page was statically rendered at build time (no getServerSideProps or getInitialProps)
     * @param page The page key
     * @returns
     */
    protected isPrerendered(page: string): boolean;
    /**
     * Returns true if page is with HTML extension in pages or app paths manifest files.
     * That means that page was statically rendered at build time and had no getServerSideProps or getInitialProps functions.
     * @param pageName
     * @returns
     */
    protected hasFileWithHtmlExtension(pageName: string): boolean;
    /**
     * Returns object with dataRoute of page
     * or undefined if page has no dataRoute
     * @param pageName
     * @returns
     */
    protected getDataRoute(pageName: string): DataRoute | undefined;
    /**
     * Returns the list of prerendered routes of provided page.
     * @param page
     * @returns
     */
    protected getPrerenderedRoutes(page: Page): PrerenderedRoute[];
    /**
     * Returns initialRevalidateSeconds value for given prerendered route
     * or undefined when it doesn't exist.
     * @param pageRoute
     * @returns
     */
    protected getRevalidateSeconds(pageRoute: string): boolean | number | undefined;
    /**
     * Returns fallback value for given prerendered route
     * or undefined when it doesn't exist.
     * @param pageRoute
     * @returns
     */
    protected getFallback(pageRoute: string): string | boolean | null | undefined;
    /**
     * Returns previewModeId from prerender-manifest
     * @returns
     */
    getPreviewModeId(): string | undefined;
    /**
     * Returns locales from routes-manifest
     * @returns
     */
    getLocales(): string[];
    /**
     * Returns default locale from routes-manifest
     * @returns
     */
    getDefaultLocale(): string | undefined;
    /**
     * Returns true if page name is one of the template names
     * @returns
     */
    protected isTemplate(pageName: string): RegExpMatchArray | null;
    /**
     * Sorts pages so the most matching dynamic routes are first.
     * The static routes are added at the end.
     * @param pages Page paths
     */
    sortPages(pages: Page[]): Page[];
}
