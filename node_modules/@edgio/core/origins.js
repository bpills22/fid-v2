"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPrefetchOrigin = exports.createServerlessOrigin = exports.createSelfOrigin = exports.createPermanentStaticOrigin = exports.createStaticOrigin = exports.getPathPrefix = exports.getEdgioOrigins = exports.PREFETCH_ORIGIN_NAME = exports.SERVERLESS_ORIGIN_NAME = exports.PERMANENT_STATIC_ORIGIN_NAME = exports.SELF_ORIGIN_NAME = exports.STATIC_ORIGIN_NAME = void 0;
const constants_1 = require("./constants");
const environment_1 = require("./environment");
const ports_1 = require("./utils/ports");
/**
 * The id of the origin from which we serve static assets associated with a single deployment
 */
exports.STATIC_ORIGIN_NAME = 'edgio_static';
/**
 * The id of the origin from which allows edge functions to re-enter the edge.
 */
exports.SELF_ORIGIN_NAME = 'edgio_self';
/**
 * The id of the origin from which we serve static assets with globally unique filenames (usually based on a hash of the file content)
 * for all deployments.
 */
exports.PERMANENT_STATIC_ORIGIN_NAME = 'edgio_permanent_static';
/**
 * The id of the origin from which serverless functions are served.
 */
exports.SERVERLESS_ORIGIN_NAME = 'edgio_serverless';
/**
 * The id of the origin with pre-built @edgio/prefetch assets
 */
exports.PREFETCH_ORIGIN_NAME = 'edgio_prefetch';
const internalConfig = process.env[constants_1.EDGIO_ENV_VARIABLES.internalConfig]
    ? JSON.parse(process.env[constants_1.EDGIO_ENV_VARIABLES.internalConfig] || '{}')
    : {};
// TODO: we need this function to remove path_prefix from the origin config
// this is currently added so we can do propper url rewriting in the edge,
// but once this is not needed we should remove it.
// Without this function, Sailfish validation will fail
const getOriginFromConfig = (name) => {
    var _a;
    const origin = (_a = internalConfig === null || internalConfig === void 0 ? void 0 : internalConfig.origins) === null || _a === void 0 ? void 0 : _a.find((origin) => origin.name === name);
    if (origin) {
        for (let host of origin.hosts) {
            // Enforce https for all origins,
            // because Function URLs don't support http
            host.scheme = 'https';
            // Path_prefix is not valid edge_control schema option,
            // so we need to remove it
            // @ts-ignore
            delete host.path_prefix;
        }
        return {
            ...origin,
            // It's important to not set (and remove existing)
            // sni_hint_and_strict_san_check here, because right now
            // we don't have way to set two different
            // sni_hint_and_strict_san_check configs to each origin host
            // and in production it results in 502 Gateway error on the edge.
            // See https://jira.atlas.llnw.com/browse/POR-31818 for more details.
            // TODO: Remove this once POR-31818 is supported
            tls_verify: {
                use_sni: true,
            },
        };
    }
    return origin;
};
function getEdgioOrigins(forEdgeControl = false) {
    return [
        createStaticOrigin(),
        createPermanentStaticOrigin(),
        createServerlessOrigin(forEdgeControl),
        // If we are running locally define the edgio_self and edgio_prefetch origins.
        // If in production, this is defined already.
        ...((0, environment_1.isLocal)() ? [createPrefetchOrigin(), createSelfOrigin()] : []),
    ];
}
exports.getEdgioOrigins = getEdgioOrigins;
function getPathPrefix(origin) {
    var _a, _b, _c;
    return (((_c = (_b = (_a = internalConfig === null || internalConfig === void 0 ? void 0 : internalConfig.origins) === null || _a === void 0 ? void 0 : _a.find((o) => o.name === origin)) === null || _b === void 0 ? void 0 : _b.hosts[0]) === null || _c === void 0 ? void 0 : _c.path_prefix) || '');
}
exports.getPathPrefix = getPathPrefix;
/**
 *  * Creates the origin group for serving static assets associated with a single deployment.
 * @returns
 */
function createStaticOrigin() {
    return (getOriginFromConfig(exports.STATIC_ORIGIN_NAME) || {
        name: exports.STATIC_ORIGIN_NAME,
        hosts: [{ location: `127.0.0.1:${ports_1.assetPort}` }],
    });
}
exports.createStaticOrigin = createStaticOrigin;
/**
 * Creates the origin group for serving static assets with globally unique URLs across all deployments.
 * @returns
 */
function createPermanentStaticOrigin() {
    return (getOriginFromConfig(exports.PERMANENT_STATIC_ORIGIN_NAME) || {
        name: exports.PERMANENT_STATIC_ORIGIN_NAME,
        hosts: [{ location: `127.0.0.1:${ports_1.assetPort}` }],
    });
}
exports.createPermanentStaticOrigin = createPermanentStaticOrigin;
/**
 * Creates the origin group which allows the edge function to re-enter the edge.
 * @returns
 */
function createSelfOrigin() {
    return (getOriginFromConfig(exports.SELF_ORIGIN_NAME) || {
        name: exports.SELF_ORIGIN_NAME,
        override_host_header: `127.0.0.1`,
        hosts: [
            {
                location: [
                    {
                        hostname: '127.0.0.1',
                        port: ports_1.port,
                    },
                ],
            },
        ],
    });
}
exports.createSelfOrigin = createSelfOrigin;
/**
 * Creates the origin group for serverless functions.
 * When forEdgeControl is false, the serverless origin target is the app. (In simulator and on permalink)
 * When forEdgeControl is true, the serverless origin target is link to permalink.
 * This ensure that the app is not infinitely sending requests to itself.
 * @returns
 */
function createServerlessOrigin(forEdgeControl = false) {
    // Return origin from config only in case we are generating config for edge control.
    // Otherwise keep the localhost origin which is pointing to the app.
    const originFromConfig = forEdgeControl ? getOriginFromConfig(exports.SERVERLESS_ORIGIN_NAME) : null;
    return (originFromConfig || {
        name: exports.SERVERLESS_ORIGIN_NAME,
        hosts: [{ location: `127.0.0.1:${ports_1.jsPort}` }],
    });
}
exports.createServerlessOrigin = createServerlessOrigin;
/**
 * Creates the origin config for the prefetch origin with pre-built @edgio/prefetch assets.
 * This origin is used just for local simulation.
 * @returns
 */
function createPrefetchOrigin() {
    return {
        name: exports.PREFETCH_ORIGIN_NAME,
        override_host_header: 'edgio-sites-prefetch-default.edgio.link',
        hosts: [{ location: 'edgio-sites-prefetch-default.edgio.link' }],
    };
}
exports.createPrefetchOrigin = createPrefetchOrigin;
