import Mod from './Mod';
import Phase from '../Phase';
import { ImageOptimizerConfig } from '../image-optimizer/types';
/**
 * Emulation of Sailfish's Image Optimizer.
 */
export default class ModImageOptimizer extends Mod {
    protected config: ImageOptimizerConfig;
    execute(phase: Phase): Promise<void>;
    /**
     * In the UriClean phase, we check if the image optimization is enabled
     * and parse the config from the request query and headers.
     * This needs to be done before the ModStream runs,
     * so it can disable the streaming if the image optimization is enabled
     * for the given request.
     */
    protected handleUriClean(): Promise<void>;
    /**
     * In the SendRequestContent phase,
     * right after the ModProxyCore has fetched the response from the origin
     * to buffer, we perform the actual image optimization.
     */
    protected handleSendRequestContent(): Promise<void>;
    /**
     * Returns true if the response is compatible with the Image Optimizer
     * and can be optimized.
     */
    protected canOptimize(): boolean;
    /**
     * Returns true if the Image Optimizer is enabled.
     */
    protected isEnabled(): boolean;
    toString(): string;
}
