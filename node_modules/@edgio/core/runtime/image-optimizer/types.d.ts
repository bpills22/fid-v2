/// <reference types="node" />
export declare const AUTO_OPTIONS: {
    webp: string;
    saveData: string;
    smallest: string;
};
export declare const FIT_OPTIONS: {
    crop: string;
    cover: string;
    bounds: string;
    smart: string;
    default: string;
};
/**
 * Those content types that are supported by Image Optimizer.
 */
export declare const SUPPORTED_TYPES: {
    [key: string]: string;
};
export declare const SUPPORTED_EXTENSIONS: string[];
export declare const SUPPORTED_CONTENT_TYPES: string[];
export declare const MAX_IMAGE_SIZE: number;
export type FitOption = (typeof FIT_OPTIONS)[keyof typeof FIT_OPTIONS];
export type AutoOption = (typeof AUTO_OPTIONS)[keyof typeof AUTO_OPTIONS][];
export type FormatOption = (typeof SUPPORTED_TYPES)[keyof typeof SUPPORTED_TYPES];
export type RgbaColor = {
    r: number;
    g: number;
    b: number;
    alpha: number;
};
export interface ImageOptimizerOutput {
    output: Buffer;
    metadata?: ImageOptimizerMetadata;
}
export interface ImageOptimizerMetadata {
    inputSize: number;
    outputSize: number;
    inputFormat: string;
    outputFormat: string;
    inputHeight: number;
    outputHeight: number;
    inputWidth: number;
    outputWidth: number;
    outputQuality: number;
    duration: number;
}
export interface ImageOptimizerConfig {
    auto?: AutoOption;
    bgColor?: RgbaColor;
    blur?: number;
    canvas?: {
        width: number;
        height: number;
        xOffset: number;
        yOffset: number;
    };
    dpr?: number;
    fit?: FitOption;
    format?: FormatOption;
    height?: number;
    width?: number;
    pad?: {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    quality?: number;
    rotate?: number;
    strip?: boolean;
    trim?: {
        left: number;
        right: number;
        top: number;
        bottom: number;
    };
    wurfl?: boolean;
}
