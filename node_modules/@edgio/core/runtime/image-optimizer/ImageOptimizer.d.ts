/// <reference types="node" />
import { type Sharp, type SharpOptions, type FitEnum } from 'sharp';
import { ImageOptimizerOutput, ImageOptimizerConfig } from './types';
export type sharp = (input: Buffer, options?: SharpOptions) => Sharp;
/**
 * The Image Optimizer
 * that can be used to optimize and transform images.
 * See https://docs.edg.io/guides/v7/performance/image_optimization
 * and https://docs.edgecast.com/cdn/Content/HTTP_and_HTTPS_Data_Delivery/Edge-IO.htm#EdgeImageOptimizer
 * for all details and options.
 */
export declare class ImageOptimizer {
    readonly config: ImageOptimizerConfig;
    protected cachedSharp?: sharp;
    constructor(config?: ImageOptimizerConfig);
    /**
     * Optimizes the image in the buffer
     * and returns it as a new buffer.
     * @param input
     */
    optimize(input: Buffer): Promise<ImageOptimizerOutput>;
    /**
     * Dynamically loads the sharp module
     */
    protected getSharp(): Promise<sharp | undefined>;
    /**
     * Calculates the number of pixels for the given value.
     * The value is treated as percentage of the image size
     * in case the value is less than 1 and as pixels otherwise.
     * For example: 0.5 means 50% of the image size after resizing.
     * For example: 10 means 10px
     * @param value
     * @param length
     */
    protected toPixels(value: number, length: number): number;
    /**
     * Converts our Image Optimizer fit option
     * to most similar sharp's fit option.
     * @param edgioFit
     */
    protected toSharpFit(edgioFit: string): keyof FitEnum;
}
