"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HANDLER_MAX_HEADER_VALUE_SIZE = exports.HANDLER_REQUEST_TIMEOUT = exports.HANDLER_RESERVED_TIME = exports.HANDLER_RESERVED_MEMORY = exports.RESPONSE_SIZE_LIMIT = void 0;
/**
 * NOTE: The number is not exactly 6MiB, because AWS has some additional overhead for the response
 * or doesn't measure the response size exactly. This number is based on the empirical testing
 * when the response was rejected by AWS with 502 Bad Gateway error.
 * Be careful when changing this number.
 */
exports.RESPONSE_SIZE_LIMIT = 6277476;
/**
 * The amount of memory in MiB that is reserved for the main process 'handler.ts'
 * to prevent the crash of the whole lambda when the server process consumes all the memory.
 * It should be enough to handle the response and encode it to base64.
 * Default memory limit is 896MiB.
 */
exports.HANDLER_RESERVED_MEMORY = 50;
/**
 * The time in milliseconds that is reserved for the main process 'handler.ts' to
 * finish all the operations and return the error response before the lambda actually times out.
 * Default timeout is 20s.
 */
exports.HANDLER_RESERVED_TIME = 250;
/**
 * The time in milliseconds that handler.ts
 * waits for the response from the server process.
 */
exports.HANDLER_REQUEST_TIMEOUT = 5 * 60 * 1000;
/**
 * The maximum size of single header value in bytes.
 * Function URLs return 502 Bad Gateway from awselb/2.0
 * when the header value is greater than 32KB (1000 in this case) 31.25KiB
 */
exports.HANDLER_MAX_HEADER_VALUE_SIZE = 32 * 1000;
