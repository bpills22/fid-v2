"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.metrics = void 0;
const idUtils_1 = require("../utils/idUtils");
/**
 * Object with the metrics for the current handler.ts instance
 */
exports.metrics = {
    handlerId: (0, idUtils_1.generateRandomId)(),
    // Times
    handlerStartedAt: Date.now(),
    serverStartedAt: undefined,
    serverReadyAt: undefined,
    handlerReqStartedAt: undefined,
    handlerReqFinishedAt: undefined,
    serverReqStartedAt: undefined,
    serverReqFinishedAt: undefined,
    // Counters
    handlerReqCount: 0,
    serverReqCount: 0,
    handlerErrorCount: 0,
    // Calculates durations
    get handlerLifeTime() {
        return Date.now() - this.handlerStartedAt;
    },
    get serverLifeTime() {
        return this.serverStartedAt ? Date.now() - this.serverStartedAt : 0;
    },
    get handlerTime() {
        return this.handlerReqStartedAt && this.handlerReqFinishedAt
            ? this.handlerReqFinishedAt - this.handlerReqStartedAt
            : 0;
    },
    get serverTime() {
        return this.serverReqStartedAt && this.serverReqFinishedAt
            ? this.serverReqFinishedAt - this.serverReqStartedAt
            : 0;
    },
    get serverReadyTime() {
        return this.serverReadyAt && this.serverStartedAt
            ? this.serverReadyAt - this.serverStartedAt
            : 0;
    },
    get handlerColdStart() {
        return this.handlerReqCount === 1;
    },
    get serverColdStart() {
        return this.serverReqCount === 1;
    },
    get handlerRss() {
        const { rss } = process.memoryUsage();
        return Math.round((rss / 1024 / 1024) * 100) / 100;
    },
    _handlerColdStartTime: undefined,
    get handlerColdStartTime() {
        if (this.handlerColdStart)
            this._handlerColdStartTime = this.handlerTime;
        return this._handlerColdStartTime;
    },
    _serverColdStartTime: undefined,
    get serverColdStartTime() {
        if (this.serverColdStart)
            this._serverColdStartTime = this.serverTime;
        return this._serverColdStartTime;
    },
    // Returns the serialized metrics
    serialize() {
        const shortcuts = {
            // Handler ID - The unique ID of this handler instance.
            hid: this.handlerId,
            // Handler lifetime - The total time in ms this handler instance exists.
            hlt: this.handlerLifeTime,
            // Server lifetime - The total time in ms this server instance exists.
            slt: this.serverLifeTime,
            // Handler Request Count - The total number of requests this handler instance has processed.
            hrc: this.handlerReqCount,
            // Server Request Count - The total number of requests this server instance has processed.
            src: this.serverReqCount,
            // Handler Error Count - The total number of errors this handler instance has encountered.
            hec: this.handlerErrorCount,
            // Handler Memory RSS - The total memory in MiB occupied by the code segment, heap and stack of this process
            hrss: this.handlerRss,
            // Handler Time - The total time in ms this handler instance has spent from receiving the request to sending the response.
            ht: this.handlerTime,
            // Server Time - The total time in ms this server instance has spent from receiving the request to sending the response.
            st: this.serverTime,
            // Server Ready Time - The total time in ms this server instance has spent from starting to be ready to receive requests.
            srt: this.serverReadyTime,
            // Handler Cold Start - 1 If the handler is started for the first time, 0 otherwise.
            hcs: this.handlerColdStart,
            // Server Cold Start - 1 If the server is started for the first time, 0 otherwise.
            scs: this.serverColdStart,
            // Handler Cold Start Time - Returns the value of 'handlerTime' metric when handler was started for the first time.
            hcst: this.handlerColdStartTime,
            // Server Cold Start Time - Returns the value of 'serverTime' metric when server was started for the first time.
            scst: this.serverColdStartTime,
        };
        return Object.entries(shortcuts)
            .map(([key, value]) => `${key}=${value}`)
            .join(',');
    },
};
