{
  "version": 3,
  "sources": ["../../src/lambda/handler.ts", "../../src/utils/ports.ts", "../../src/constants.ts", "../../src/log.ts", "../../src/errors/EdgioError.ts", "../../src/errors/edgioErrorLinks.ts", "../../src/errors/EdgioHeadersOverflowError.ts", "../../src/errors/EdgioInternalError.ts", "../../src/errors/EdgioProjectCrashedError.ts", "../../src/errors/EdgioOutOfResourcesError.ts", "../../src/errors/EdgioProjectTimeoutError.ts", "../../src/errors/EdgioResponseTooLargeError.ts", "../../src/lambda/eventUtils.ts", "../../src/lambda/handlerConstants.ts", "../../src/utils/idUtils.ts", "../../src/lambda/handlerMetrics.ts", "../../src/lambda/global.helpers.ts", "../../src/environment.ts"],
  "sourcesContent": ["import type { APIGatewayProxyEventV2, Context } from 'aws-lambda'\nimport { localhost, port } from '../utils/ports'\nimport http from 'http'\nimport { HTTP_HEADERS, INVOKE_SOURCES, EDGIO_READY_MESSAGE } from '../constants'\nimport { getHeapStatistics } from 'v8'\nimport logger from '../log'\nimport {\n  EdgioInternalError,\n  EdgioProjectCrashedError,\n  EdgioOutOfResourcesError,\n  EdgioProjectTimeoutError,\n  EdgioResponseTooLargeError,\n  EdgioHeadersOverflowError,\n  isEdgioError,\n} from '../errors'\nimport {\n  BufferProxyEvent,\n  UnknownEvent,\n  cookiesFromEvent,\n  invokeActionFromEvent,\n  invokeSourceFromEvent,\n  isApiGatewayV2Event,\n  isConsoleEvent,\n  methodFromEvent,\n  pathFromEvent,\n  requestIdFromEvent,\n  searchFromEvent,\n  singleValueHeadersFromEvent,\n  urlFromEvent,\n  headerValueFromEvent,\n  sanitizeHeaders,\n} from './eventUtils'\nimport {\n  RESPONSE_SIZE_LIMIT,\n  HANDLER_RESERVED_MEMORY,\n  HANDLER_RESERVED_TIME,\n  HANDLER_REQUEST_TIMEOUT,\n  HANDLER_MAX_HEADER_VALUE_SIZE,\n} from './handlerConstants'\nimport { fork, ChildProcess } from 'child_process'\nimport { join } from 'path'\nimport { metrics } from './handlerMetrics'\nimport { isLocal } from '../environment'\n\n/**\n * The console expects the response to be a string.\n */\nexport type ConsoleResponse = string\n\n/**\n * The format of the error response for the console.\n */\nexport type ConsoleErrorResponse = {\n  statusCode: number\n  errorMessage: any\n}\n\n/**\n * The universal BufferedResponse object for Lambda Responses.\n */\ntype BufferedResponse = {\n  base64EncodedBody?: string | Buffer\n  unencodedBody: string | Buffer\n  statusCode: number\n  headers: Record<string, string | string[]>\n}\n\n/**\n * The response object for BufferProxyEvent\n * that comes from the invocation made by XDN Buffer Proxy.\n */\nexport type BufferProxyResponse = {\n  body: string | Buffer\n  isBase64Encoded: boolean\n  statusCode: number\n  statusMessage: string\n  multiValueHeaders: Record<string, string[]>\n}\n\n/**\n * The response object for APIGatewayProxyEventV2\n * that comes from the invocation made by Function URL.\n */\nexport type ApiGatewayV2Response = {\n  body: string | Buffer\n  isBase64Encoded: boolean\n  statusCode: number\n  headers: Record<string, string>\n}\n\ntype HandlerResponse =\n  | BufferProxyResponse\n  | ApiGatewayV2Response\n  | ConsoleResponse\n  | ConsoleErrorResponse\n\n/**\n * Following variables needs to be global,\n * so we can still hold reference to the server child process\n * between lambda invocations.\n */\nlet server: undefined | ChildProcess\nlet timeout: undefined | NodeJS.Timeout\n\n/**\n * The handler function is the main entry point in the lambda.\n * It's responsible for:\n * - Spawning the server process\n * - Managing the system resources in way that should prevent the crash of whole lambda\n * - Converting the lambda event to node req/res and proxying it to the server\n * - Catching top-level lambda errors and restarting the server if it crashes\n *\n * The reserves the necessary system resources for itself first,\n * and then dedicates the rest of the resources to the server process.\n *\n * This handler is expected to be run in Linux environment\n * only and runs only in AWS Lambda as it's using the native OS APIs.\n * Therefore, it's excluded from the local simulation,\n * that starts the server directly in the main process.\n * @param event\n * @param context\n */\nexport const handler = async (\n  event: APIGatewayProxyEventV2 | BufferProxyEvent,\n  context: Context\n): Promise<HandlerResponse> => {\n  let response: BufferedResponse\n  metrics.handlerReqStartedAt = Date.now()\n\n  try {\n    // The context is restored on each invocation,\n    // so we need to reset the timeout right away on each invocation.\n    clearTimeout(timeout)\n\n    // Don't wait for the event loop to be empty.\n    // The lambda would timeout without this config,\n    // because we're running server in the background.\n    context.callbackWaitsForEmptyEventLoop = false\n\n    // We need to keep the server process running between lambda invocations.\n    // Spawn server if it's not already running.\n    server = server || (await spawnServer())\n    // Remove all existing event listeners from the previous invocation.\n    server.removeAllListeners()\n\n    response = await Promise.race([\n      handleTimeoutError(context),\n      handleServerError(server),\n      handleServerResponse(event),\n    ])\n\n    // Added to make the tests exit cleanly and fast.\n    timeout?.unref()\n\n    // Check the size of every individual header value\n    // before returning the response.\n    if (containsHeaderOverLimit(response.headers)) {\n      throw new EdgioHeadersOverflowError(\n        `Headers contain value over the limit of ${HANDLER_MAX_HEADER_VALUE_SIZE}B`\n      )\n    }\n\n    // Convert the response body string/buffer to base64, to correctly return binary data.\n    response.base64EncodedBody = Buffer.from(response.unencodedBody as string).toString('base64')\n\n    // The 6277476 bytes (around 6MB \u2243 5.9MiB) is the maximum allowed response size for Buffered Lambda Responses.\n    // If the response is larger than this, AWS returns 502 Bad Gateway error.\n    // We need to check the size of the final base64 encoded response and return a custom error ahead of time.\n    if (response.base64EncodedBody.length > RESPONSE_SIZE_LIMIT) {\n      throw new EdgioResponseTooLargeError(\n        `Received base64 encoded body with size ${response.base64EncodedBody.length}B`\n      )\n    }\n  } catch (e: any) {\n    metrics.handlerErrorCount++\n    response = await handleError(e, event)\n  }\n\n  metrics.handlerReqCount++\n  metrics.handlerReqFinishedAt = Date.now()\n  return shapeResponseForEvent(event, addMetrics(response))\n}\n\n/**\n * Injects the metrics headers into the response\n * or appends the metrics to the existing header.\n * @param response The lambda response\n */\nexport function addMetrics(response: BufferedResponse) {\n  // Metrics for x-edg-t header\n  // x-edg-t: hid=3rYwt1zjg2,hlt=69906,slt=69899,hrc=4,src=4,hec=4 etc...\n  const xEdgeT = response.headers[HTTP_HEADERS.xEdgeT] || ''\n  const previousXEdgeT = xEdgeT ? `,${xEdgeT}` : ''\n  response.headers[HTTP_HEADERS.xEdgeT] = `${metrics.serialize()}${previousXEdgeT}`\n\n  // Status code for x-edg-status header\n  // x-edg-status: 200\n  const xEdgeStatus = response.headers[HTTP_HEADERS.xEdgeStatus] || ''\n  const previousXEdgeStatus = xEdgeStatus ? `,${xEdgeStatus}` : ''\n  response.headers[HTTP_HEADERS.xEdgeStatus] = `h=${response.statusCode}${previousXEdgeStatus}`\n\n  return response\n}\n\n/**\n * Converts universal BufferedResponse to the specific response object\n * based on the lambda event type.\n * @param event The lambda event\n * @param response The universal BufferedResponse\n * @returns HandlerResponse The specific response object\n */\nexport function shapeResponseForEvent(\n  event: UnknownEvent,\n  response: BufferedResponse\n): HandlerResponse {\n  // Sanitize the headers before returning them to the client.\n  response.headers = sanitizeHeaders(response.headers)\n\n  // Encode the body to base64 if it's not already provided.\n  if (!response.base64EncodedBody) {\n    response.base64EncodedBody = Buffer.from(response.unencodedBody).toString('base64')\n  }\n\n  // Return caught errors to the console as object,\n  // if invoked from the console, so we can fail deployment\n  // and show the error message in the logs.\n  if (isConsoleEvent(event) && (response.statusCode ?? 0) >= 500) {\n    const errorMessage = JSON.parse(response.unencodedBody as string)\n    return {\n      statusCode: response.statusCode,\n      errorMessage: errorMessage,\n    }\n  }\n\n  // Return success responses in plain text format for the console\n  if (isConsoleEvent(event)) {\n    return response.unencodedBody.toString() as ConsoleResponse\n  }\n\n  if (isApiGatewayV2Event(event)) {\n    const lowerCaseHeaders = Object.fromEntries(\n      Object.entries(response.headers).map(([key, value]) => [key.toLowerCase(), value])\n    )\n    const cookies = lowerCaseHeaders['set-cookie'] ?? []\n    delete lowerCaseHeaders['set-cookie']\n    return {\n      statusCode: response.statusCode,\n      headers: lowerCaseHeaders,\n      cookies,\n      body: response.base64EncodedBody,\n      isBase64Encoded: true,\n    } as ApiGatewayV2Response\n  } else {\n    return {\n      statusCode: response.statusCode,\n      multiValueHeaders: Object.entries(response.headers!).reduce(\n        (accumulatedHeaders, [key, value]) => ({\n          ...accumulatedHeaders,\n          // the set-cookie header is multi-value\n          [key]: Array.isArray(value) ? value : [value],\n        }),\n        {}\n      ),\n      body: response.base64EncodedBody.toString(),\n      isBase64Encoded: true,\n    } as BufferProxyResponse\n  }\n}\n\n/**\n * Handles any error, converts it to EdgioError if necessary,\n * renders error page and returns it as the lambda response.\n * @param e The error\n * @param event The lambda event\n * @returns The lambda response\n */\nexport async function handleError(\n  e: any,\n  event: APIGatewayProxyEventV2 | BufferProxyEvent\n): Promise<BufferedResponse> {\n  // Here we catch all server-level errors (Error Level: 1)\n  // and render nice looking error page with error details.\n  // ERROR LEVELS overview:\n  // Error Level 0 is handled by the Edge and means that both lambdas failed or are not available.\n  // Error Level 1 is handled by the Lambda itself and is for fatal server errors, like timeouts, out of memory etc...\n  // Error Level 2 is handled by the Lambda itself and is for project errors, like uncaught user-errors in compute, malformed responses, etc...\n\n  // Wrap all errors into EdgioError instance\n  // NOTE: instance of EdgioError doesn't work here.\n  const error = isEdgioError(e) ? e : new EdgioInternalError(e.message, e.stack)\n\n  const requestId = requestIdFromEvent(event)\n  const method = methodFromEvent(event) || 'GET'\n  const url = urlFromEvent(event)\n\n  // Set correct error type based on request accept header\n  const acceptHeader = headerValueFromEvent(event, HTTP_HEADERS.accept)\n  const type = acceptHeader?.includes('html') ? 'html' : 'json'\n  const contentType = type === 'html' ? 'text/html' : 'application/json'\n  const invokeSource = invokeSourceFromEvent(event)\n\n  // Log the error for debugging with the details from event\n  logger.error(`[Edgio Error][Level 1]: ${method} ${url} - ${e?.stack}`)\n\n  // If error is caused by one of the following errors,\n  // we need to clear the server process, so it's restarted on the next request.\n  // 539 - EdgioProjectTimeoutError - Server can be stuck in infinite loop or heavy computation and won't respond to any other requests.\n  // 540 - EdgioOutOfResourcesError - Server consumed all the memory and crashed.\n  // 549 - EdgioProjectCrashedError - Server crashed for some other reason.\n  if ([539, 540, 549].includes(error.statusCode)) {\n    clearServer()\n  }\n\n  // Render the EdgioError to HTML or JSON response\n  return {\n    statusCode: error.statusCode,\n    headers: {\n      [HTTP_HEADERS.contentType]: contentType,\n      [HTTP_HEADERS.xEdgErrorMessage]: encodeURI(error.message),\n      [HTTP_HEADERS.xEdgErrorLevel]: error.level.toString(),\n      [HTTP_HEADERS.xEdgErrorDetails]: encodeURI(error.details || ''),\n    },\n    unencodedBody: error.render({\n      type,\n      requestId,\n      includeStack: isLocal() || invokeSource === INVOKE_SOURCES.console,\n    }),\n  }\n}\n\n/**\n * Converts the lambda event to node req/res\n * and proxies it to the server.\n * @param event The lambda event\n */\nexport async function handleServerResponse(\n  event: APIGatewayProxyEventV2 | BufferProxyEvent\n): Promise<BufferedResponse> {\n  const method = methodFromEvent(event) || 'GET'\n  const path = pathFromEvent(event) || '/'\n  const search = searchFromEvent(event) || ''\n  const pathWithSearch = path + search\n  const headers = sanitizeHeaders(singleValueHeadersFromEvent(event) || {})\n  const cookies = cookiesFromEvent(event)\n\n  // Cookie is the only header that can be multi-value.\n  // @ts-ignore\n  headers.cookie = cookies\n\n  const invokeSource = invokeSourceFromEvent(event)\n  const invokeAction = invokeActionFromEvent(event)\n\n  // Pass invoke source and action to server as reserved headers\n  // that users can't override or set through the Function URL request.\n  // The source and action are later checked in the dispatch function.\n  // See: packages/core/src/lambda/dispatch.ts\n  headers[HTTP_HEADERS.xEdgInvokeSource] = invokeSource\n  headers[HTTP_HEADERS.xEdgInvokeAction] = invokeAction\n  // Pass original rawUrl (without encoded/decoded query) in as request header,\n  // so we can expose it under req.rawUrl property in server\n  headers[HTTP_HEADERS.xEdgRawUrl] = urlFromEvent(event) || '/'\n\n  const body = event.body\n    ? Buffer.from(event.body, event.isBase64Encoded ? 'base64' : undefined)\n    : undefined\n\n  const requestOptions = {\n    hostname: localhost,\n    port: port,\n    path: pathWithSearch,\n    method,\n    headers,\n    timeout: HANDLER_REQUEST_TIMEOUT,\n  } as http.RequestOptions\n\n  return new Promise((resolve, reject) => {\n    metrics.serverReqCount++\n    metrics.serverReqStartedAt = Date.now()\n    metrics.serverReqFinishedAt = undefined\n\n    const req = http.request(requestOptions, res => {\n      let body = Buffer.from('')\n      res.on('data', chunk => {\n        body = Buffer.concat([body, chunk])\n        // Check the response body size before the encoding to base64.\n        // We destroy the request if it's too large\n        // and return the error page immediately,\n        // so we don't even waste resources to encoding it to base64.\n        // Even when the response is less than 6MB here,\n        // it can still be larger after the base64 encoding.\n        // That's why we have second check in the handler function.\n        if (body.length > RESPONSE_SIZE_LIMIT) {\n          req.destroy()\n          reject(new EdgioResponseTooLargeError(`Received body with size ${body.length}B`))\n        }\n      })\n      res.on('error', (e: any) => {\n        // Return original error\n        reject(e)\n      })\n      res.on('end', () => {\n        metrics.serverReqFinishedAt = Date.now()\n        resolve({\n          statusCode: res.statusCode || 200,\n          // NOTE: Duplicate set-cookie headers are always in single array\n          headers: res.headers as Record<string, string | string[]>,\n          unencodedBody: body,\n        })\n      })\n    })\n    req.on('timeout', () => {\n      req.destroy()\n      reject(new EdgioProjectTimeoutError('The req to the server timed out'))\n    })\n    req.on('error', (e: any) => {\n      // When the server crash or is killed,\n      // the socket is closed. These kind of errors are expected\n      // and caught by the handleServerError function.\n      // In this case we care more about the server crash reason than the req error.\n      if (e.code === 'ECONNRESET') return\n      if (e.code === 'HPE_HEADER_OVERFLOW') {\n        reject(\n          new EdgioHeadersOverflowError(\n            'HPE_HEADER_OVERFLOW - The server response headers are too large'\n          )\n        )\n      }\n      // Return original error\n      return reject(e)\n    })\n    req.end(body)\n  })\n}\n\n/**\n * Measures the time of the lambda invocation\n * and returns timeout error page a few milliseconds\n * before the lambda would actually time out.\n * @param context The lambda context\n */\nexport async function handleTimeoutError(context: Context): Promise<BufferedResponse> {\n  return new Promise((_resolve, reject) => {\n    // We need some reserved time to handle the error and return the response\n    // before the lambda actually times out.\n    const timeoutMilliseconds = context.getRemainingTimeInMillis() - HANDLER_RESERVED_TIME\n    timeout = setTimeout(() => {\n      clearTimeout(timeout)\n      reject(\n        new EdgioProjectTimeoutError(\n          `The project's code was terminated after ${timeoutMilliseconds}ms`\n        )\n      )\n    }, timeoutMilliseconds)\n  })\n}\n\n/**\n * Handles any server error and returns\n * error page with error details as the lambda response.\n * @param child The server process\n */\nexport async function handleServerError(child?: ChildProcess) {\n  return new Promise<BufferedResponse>((_resolve, reject) => {\n    child?.on('exit', code => {\n      if (code === null || code === undefined) {\n        // When the server crash for memory consumption,\n        // the exit code is null, and we need to handle it as OutOfResourcesError.\n        const handlerHeapLimit = getHandlerHeapLimit()\n        return reject(\n          new EdgioOutOfResourcesError(`Total configured memory ${handlerHeapLimit}MB was exceeded`)\n        )\n      }\n\n      // When the server crash for other reasons, like uncaught exception,\n      // we need to handle it as CrashedError.\n      // For example: 0,1 etc...\n      reject(new EdgioProjectCrashedError(`Server exited with code ${code}`))\n    })\n  })\n}\n\n/**\n * Immediately terminates the server process\n * and clears the reference to it.\n */\nexport function clearServer() {\n  // Terminate the process immediately.\n  // The server process doesn't do/have write access to the file system anyway,\n  // so it cannot get into inconsistent state when killed abruptly.\n  server?.kill('SIGKILL')\n  server = undefined\n\n  metrics.serverStartedAt = undefined\n  metrics.serverReadyAt = undefined\n  metrics.serverReqCount = 0\n}\n\n/**\n * Spawns the server as a separate process,\n * waits for the ready message and resolves the promise\n */\nexport async function spawnServer(): Promise<ChildProcess> {\n  const serverHeapLimit = getServerHeapLimit()\n  const serverPath = join(__dirname, 'server.cjs')\n\n  metrics.serverStartedAt = Date.now()\n  metrics.serverReadyAt = undefined\n  // NOTE: fork() cold startup time of server here is by 300-400ms faster than spawn().\n  const child = fork(\n    serverPath,\n    [\n      `--max-old-space-size=${serverHeapLimit}`,\n      // Pass the handlerId to the server process,\n      // so we can put in the DRI logs.\n      `--handler-id=${metrics.handlerId}`,\n    ],\n    {\n      cwd: process.cwd(),\n      stdio: 'pipe',\n      env: process.env,\n    }\n  )\n\n  // The main handler.ts process has default priority 0.\n  // The server child process has lower priority 3 (the higher number, the lower CPU priority).\n  // The main process idles most of the time, but we need it to react quickly when necessary\n  // and don't let the server child process to consume all the CPU time.\n  // Priority can be from -20 (highest priority) to 19 (lowest priority).\n  // os.setPriority(child.pid!, 3)\n\n  // Pipe stdout and stderr to the main process\n  child.stdout?.pipe(process.stdout)\n  child.stderr?.pipe(process.stderr)\n\n  return new Promise(function (resolve, reject) {\n    let onData: (data: any) => void\n    let onError: (data: Buffer) => void\n    let onExit: (code: undefined | number) => void\n    let addListeners: () => void\n    let removeListeners: () => void\n    let previousOutput = ''\n    let stderr: Buffer[] = []\n\n    onData = data => {\n      const output = data?.toString() ?? ''\n      // In case that data is sent in multiple chunks,\n      // we should concatenate last one and new one, as we assumee that\n      // length of the chunk will be always longer than the signal message.\n      const total = previousOutput + output\n      previousOutput = output\n\n      if (total.includes(EDGIO_READY_MESSAGE)) {\n        metrics.serverReadyAt = Date.now()\n        removeListeners()\n        resolve(child)\n      }\n    }\n\n    onError = data => stderr.push(data)\n    onExit = async code => {\n      removeListeners()\n      reject(\n        new EdgioProjectCrashedError(\n          `Server process exited immediately after startup with code ${code}`,\n          Buffer.concat(stderr).toString()\n        )\n      )\n    }\n    removeListeners = () => {\n      child.stdout?.off('data', onData)\n      child.stderr?.off('data', onError)\n      child.off('exit', onExit)\n    }\n    addListeners = () => {\n      child.stdout?.on('data', onData)\n      child.stderr?.on('data', onError)\n      child.on('exit', onExit)\n    }\n\n    addListeners()\n  })\n}\n\n/**\n * The total heap memory limit for main process 'handler.ts' in MiB.\n */\nexport function getHandlerHeapLimit() {\n  return Math.floor(getHeapStatistics().heap_size_limit / 1024 / 1024)\n}\n\n/**\n * Heap memory limit for child process 'server.ts' in MiB.\n * 50MiB are reserved for the main process 'handler.ts'.\n * NOTE: fremem() and totalmem() are reporting system memory,\n * that is higher than the configured memory limit of the main process.\n */\nexport function getServerHeapLimit() {\n  return getHandlerHeapLimit() - HANDLER_RESERVED_MEMORY\n}\n\n/**\n * Returns true if the headers object\n * contains a header with value over the limit.\n * @param headers\n */\nexport function containsHeaderOverLimit(headers: Record<string, string | string[]>) {\n  for (const key in headers) {\n    if (headers[key]?.toString().length > HANDLER_MAX_HEADER_VALUE_SIZE) {\n      return true\n    }\n  }\n  return false\n}\n", "export const port = Number(process.env.PORT) || 3000\nexport const jsPort = port + 1\nexport const assetPort = port + 2\nexport const handlerPort = port + 1000\nexport const localhost = '127.0.0.1'\nexport const localhostWithPort = `${localhost}:${port}`\n", "/**\n * Edgio configuration file name.\n */\nexport const EDGIO_CONFIG_FILE = 'edgio.config.js'\n\n/**\n * Indicate asset files that need to be uploaded under a different\n * bucket key.\n * It contains values like\n * {\n *   '/posts' => '/posts/index.html'\n * }\n */\nexport const EDGIO_ASSET_ALIASES_FILE = 'asset-aliases.json'\n\n/**\n * Environment variables used by Edgio.\n */\nexport const EDGIO_ENV_VARIABLES = {\n  /**\n   * Edgio configuration environment variable key.\n   */\n  config: 'EDGIO_CONFIG',\n\n  /**\n   * Edgio internal configuration environment variable key.\n   */\n  internalConfig: 'EDGIO_INTERNAL_CONFIG',\n\n  /**\n   * Indicates whether code is running locally or in the cloud.\n   * @private\n   */\n  deploymentType: 'EDGIO_DEPLOYMENT_TYPE',\n\n  /**\n   * Allows Edgio development team to easily override Edgio version\n   * during development process.\n   * @private\n   */\n  versionOverride: 'EDGIO_VERSION_OVERRIDE',\n\n  /**\n   * Indicates that we are running a production build.\n   * @private\n   */\n  productionBuild: 'EDGIO_PRODUCTION_BUILD',\n\n  /**\n   * Indicates that we are running app locally.\n   * @private\n   */\n  local: 'EDGIO_LOCAL',\n\n  /**\n   * Turns on the cache when set to 'true'.\n   * @private\n   */\n  cache: 'EDGIO_CACHE',\n\n  /**\n   * The hostname of currently used permalink.\n   * @private\n   */\n  permalinkHost: 'EDGIO_PERMALINK_HOST',\n\n  /**\n   * The image optimizer host.\n   * This is same as the permalink host, but it's used for old image optimizer.\n   * @deprecated This will be replaced by EDGIO_PERMALINK_HOST when console-api changes are released.\n   * @private\n   */\n  imageOptimizerHost: 'EDGIO_IMAGE_OPTIMIZER_HOST',\n}\n\n/**\n * Environment variables used by Edgio Edge Functions.\n */\nexport const EDGIO_EDGE_FUNCTION_ENV_VARIABLES = {\n  /**\n   * The path to the edge function within the project.\n   */\n  path: '__EDGE_FUNCTION_PATH__',\n\n  /**\n   * The edge function's QuickJS bytecode (base64 encoded).\n   */\n  quickjsBytecodeBase64: '__EDGE_FUNCTION_QUICKJS_BYTECODE_BASE64__',\n\n  /**\n   * When 'enabled' turn on edge function debugging.\n   */\n  debug: 'debug',\n}\n\n/**\n * The default version of edge functions to use.\n * @private\n */\nexport const EDGIO_EDGE_FUNCTION_DEFAULT_VERSION = 2\n\n/**\n * Indicates that code is running in AWS.\n * @private\n */\nexport const EDGIO_DEPLOYMENT_TYPE_AWS = 'AWS'\n\n/**\n * Prefix of all Edgio headers.\n */\nexport const EDGIO_HEADERS_PREFIX = 'x-edg-'\n\n/**\n * Instructs the runtime to forward the request directly to the user's app or a function rather than processing\n * edge-control rules.\n * @private\n */\nexport const EDGIO_CLOUD_FUNCTIONS_HINT_HEADER = 'x-cloud-functions-hint'\n\n/**\n * Instructs the runtime to forward the request directly one of the router's functions by hint name.\n * @private\n */\nexport const EDGIO_CLOUD_FUNCTIONS_HINTS = {\n  // Instructs the runtime to forward the request directly to the user's app.\n  app: 'app',\n\n  // Instructs the runtime to forward the request directly one of the router's functions by index.\n  compute: 'compute',\n\n  // Instructs the runtime to invoke a compute that will execute a redirect and return early.\n  redirect: 'redirect',\n\n  // Instructs the runtime to invoke a compute that will execute a redirect and return early.\n  proxy: 'proxy',\n} as const\n\nexport type EdgioCloudFunctionsHint =\n  (typeof EDGIO_CLOUD_FUNCTIONS_HINTS)[keyof typeof EDGIO_CLOUD_FUNCTIONS_HINTS]\n\n/**\n * Maximum number of user headers allowed by Edgio platform.\n *\n * We limit the request and response headers allowed to 70. This is due to a limitation that edge has\n * which at the moment supports up to 96 headers. Edge provider itself needs to use some of those headers\n * with the remainder used by our edge code.\n *\n * NOTE: This constant must be equal ot the constant of the same name defined in Edgio buffer proxy.\n * NOTE: If this constant is updated then the constant of the same name has to be updated in @edgio/build-lambda module.\n */\nexport const EDGIO_MAX_USER_HEADERS_ALLOWED = 70\n\n/**\n * Status code returned when there are too many request or response headers.\n *\n * Must be equal to HeaderOverflowError status code as defined in build lambda and Edgio buffer proxy.\n */\nexport const EDGIO_TOO_MANY_HEADERS_STATUS_CODE = 542\n\n/**\n * The status code returned when the edgio_prefetch query param is present and a response could not be found in the cache.\n */\nexport const EDGIO_UNCACHED_PREFETCH_STATUS = 412\n\n/**\n * The maximum number of nested requests allowed by Edgio platform,\n * where a site is the upstream of itself or another site.\n * If this limit is exceeded, the request will be terminated with a 538 status code,\n * to prevent infinite loops and generating excessive traffic.\n */\nexport const EDGIO_MAX_NESTED_REQUESTS = 3\n\n/**\n * The value that is appended to the 'Via' header\n * everytime request goes through the @edgio/core.\n */\nexport const EDGIO_VIA_HEADER_VALUE = 'Edgio Core'\n\n/**\n * CDN-as-code configuration actions\n */\nexport const ACTIONS = {\n  setHeader: 'set-header',\n  updateHeader: 'update-header',\n  removeHeader: 'remove-header',\n  syntheticRes: 'synthetic-response',\n  updatePath: 'update-path',\n  proxy: 'proxy',\n  addCookie: 'add-cookie',\n  updateCookie: 'update-cookie',\n  removeCookie: 'remove-cookie',\n}\n\n/**\n * The backend for cloud functions\n */\nexport const BACKENDS = {\n  js: '__js__',\n  static: '__static__',\n  permanentStatic: '__permanent_static__',\n  imageOptimizer: '__image_optimizer__',\n}\n\n/**\n * The hostname used for the internal service running the user's application.\n */\nexport const JS_BACKEND_HOSTNAME = '127.0.0.1'\n\nexport const HTTP_METHODS = {\n  head: 'head',\n  get: 'get',\n  post: 'post',\n  delete: 'delete',\n  put: 'put',\n  patch: 'patch',\n  options: 'options',\n} as const\n\nexport type HTTPMethod = (typeof HTTP_METHODS)[keyof typeof HTTP_METHODS]\n\n/**\n * Common HTTP headers.\n */\nexport const HTTP_HEADERS = {\n  accept: 'accept',\n  acceptCh: 'accept-CH',\n  acceptEncoding: 'accept-encoding',\n  authorization: 'authorization',\n  cacheControl: 'cache-control',\n  contentEncoding: 'content-encoding',\n  contentLength: 'content-length',\n  contentType: 'content-type',\n  cookie: 'cookie',\n  expires: 'expires',\n  host: 'host',\n  location: 'location',\n  range: 'range',\n  serverTiming: 'server-timing',\n  setCookie: 'set-cookie',\n  userAgent: 'user-agent',\n  vary: 'vary',\n  via: 'via',\n  transferEncoding: 'transfer-encoding',\n  strictTransportSecurity: 'strict-transport-security',\n  referrerPolicy: 'referrer-policy',\n  featurePolicy: 'feature-policy',\n  xHost: 'x-host',\n  xEcPop: 'x-ec-pop',\n  xEcDebug: 'x-ec-debug',\n  xForwardedFor: 'x-forwarded-for',\n  xForwardedProto: 'x-forwarded-proto',\n  xForwardedPort: 'x-forwarded-port',\n  xFrameOptions: 'x-frame-options',\n  xXssProtection: 'x-xss-protection',\n  xContentTypeOptions: 'x-content-type-options',\n  xRequestId: 'x-request-id',\n  xSwCacheControl: 'x-sw-cache-control',\n  xEdgeBrowser: 'x-edg-browser',\n  xEdgeCacheControl: 'x-edg-cache-control',\n  xEdgeCachingStatus: 'x-edg-caching-status',\n  xEdgeClientIp: 'x-edg-client-ip',\n  xEdgeComponents: 'x-edg-components',\n  xEdgeDestination: 'x-edg-destination',\n  xEdgeDevice: 'x-edg-device',\n  xEdgeDeviceIsBot: 'x-edg-device-is-bot',\n  xEdgeGeoCity: 'x-edg-geo-city',\n  xEdgeGeoCountryCode: 'x-edg-geo-country-code',\n  xEdgeGeoLatitude: 'x-edg-geo-latitude',\n  xEdgeGeoLongitude: 'x-edg-geo-longitude',\n  xEdgeGeoPostalCode: 'x-edg-geo-postal-code',\n  xEdgeMatchedRoutes: 'x-edg-matched-routes',\n  xEdgeProtocol: 'x-edg-protocol',\n  xEdgeRoute: 'x-edg-route',\n  xEdgeStatus: 'x-edg-status',\n  xEdgeSurrogateKey: 'x-edg-surrogate-key',\n  xEdgeT: 'x-edg-t',\n  xEdgeUserT: 'x-edg-user-t',\n  xEdgeVendor: 'x-edg-vendor',\n  xEdgeVersion: 'x-edg-version',\n  xEdgServerlessError: 'x-edg-serverless-error',\n  xEdgInvokeSource: 'x-edg-invoke-source',\n  xEdgInvokeAction: 'x-edg-invoke-action',\n  xEdgErrorMessage: 'x-edg-error-message',\n  xEdgErrorDetails: 'x-edg-error-details',\n  xEdgErrorLevel: 'x-edg-error-level',\n  xEdgRawUrl: 'x-edg-raw-url',\n  xCloudFunctionsHint: EDGIO_CLOUD_FUNCTIONS_HINT_HEADER,\n  x0ClientIp: 'x-0-client-ip',\n  x0Protocol: 'x-0-protocol',\n  x0Version: 'x-0-version',\n  xEcEdgeIoDebug: 'x-ec-edgeio-debug',\n  xEcEdgeIoDisable: 'x-ec-edgeio-disable',\n  xEdgeIoInfo: 'x-edgeio-info',\n  xEdgeIoStatus: 'x-edgeio-status',\n  xEdgeIoError: 'x-edgeio-error',\n  xEcUUID: 'x-ec-uuid',\n} as const\n\n/**\n * Union type for HTTP_HEADERS values\n */\nexport type HttpHeaders = (typeof HTTP_HEADERS)[keyof typeof HTTP_HEADERS]\n\n/**\n * Values for x-edg-caching-status\n */\nexport const CACHING_STATUS = {\n  cached: 'cached',\n  hit: 'hit',\n  bypassed: 'bypassed',\n  private: 'private',\n  method: 'method',\n  bodyTooBig: 'body-too-big',\n  code: 'code',\n  setCookie: 'set-cookie',\n  noMaxAge: 'no-max-age',\n} as const\n\nexport type CachingStatus = (typeof CACHING_STATUS)[keyof typeof CACHING_STATUS]\n\nexport const CACHEABLE_METHODS = new Set<string>(['get', 'head'])\n\n/**\n * Values for x-edg-caching-status\n */\nexport const CACHING_DEBUG_HEADERS = {\n  cache: 'x-ec-cache',\n  checkCacheable: 'x-ec-check-cacheable',\n  cacheState: 'x-ec-cache-state',\n  cacheKey: 'x-ec-cache-key',\n}\n\n// Caching debug status codes.\n// https://docs.edgecast.com/cdn/Content/Reference/Cache_Status_Codes.htm\nexport const CACHING_DEBUG_STATUS = {\n  configNoCache: 'CONFIG_NOCACHE',\n  none: 'NONE',\n  tcpClientRefreshMiss: 'TCP_CLIENT_REFRESH_MISS',\n  tcpExpiredHit: 'TCP_EXPIRED_HIT',\n  tcpExpiredMiss: 'TCP_EXPIRED_MISS',\n  tcpHit: 'TCP_HIT',\n  tcpMiss: 'TCP_MISS',\n  tcpPartialHit: 'TCP_PARTIAL_HIT',\n  uncacheable: 'UNCACHEABLE',\n}\n\nexport const CACHING_DEBUG_CACHEABLE = {\n  yes: 'YES',\n  no: 'NO',\n}\n\n/**\n * When present, this query parameter will cause Edgio to return a 412 status\n * if a response could not be found in the cache.\n */\nexport const THROTTLED_QUERY_PARAM = 'edgio_prefetch'\n/**\n * Same value as above but DEPRECATED.\n */\nexport const PREFETCH_QUERY_PARAM = THROTTLED_QUERY_PARAM\n\n/**\n Adds query parameter with custom maxAgeSecond value for service-worker cache if it's specified in PrefetchConfiguration\n */\nexport const PREFETCH_TTL_PARAM = 'edgio_prefetch_ttl'\n\n/**\n Labels the request so that devtools will display as prefetched\n */\nexport const DEVTOOLS_PREFETCH_QUERY_PARAM = 'edgio_dt_pf'\n\n/**\n * The name of the query parameter used to detect HEAD requests.\n */\nexport const HEAD_QUERY_PARAM = 'edgio_head'\n\n/**\n * The name of the query parameter used for the body of POST requests, which is used for the cache key\n */\nexport const POST_BODY_QUERY_PARAM = 'pref_edgio_body'\n\n/**\n * The name of the query parameter used for the method of requests, which is used for the cache key\n */\nexport const METHOD_QUERY_PARAM = 'pref_edgio_method'\n\n/**\n * Route Group name, which is used in router for fallback routes\n */\nexport const ROUTES_FALLBACK = 'fallback'\n\n/**\n * Route Group name, which is used in router for error page routes\n */\nexport const ROUTES_CATCH_GROUP = 'catch'\n\n/**\n * Route Group name, which is used in router for noindex routes\n */\nexport const ROUTES_NOINDEX_GROUP = 'noindex'\n\n/**\n * Regex used to determine if the host should be excluded from\n * SE indexing\n */\nexport const HOSTS_NOINDEX_PERMALINK_REGEX = /\\.edgio\\.link|\\.edgio-perma\\.link/\n\n/**\n * The path where cache-manifest file is served by built-in rule.\n * Connascence of value with console-api/app/services/cache_manifest/constants.rb\n */\nexport const EDGIO_CACHE_MANIFEST_PATH = '/__edgio__/cache-manifest.js'\n\n/**\n * The name of the JS global constant which contains the cache-manifest content\n * when cache-manifest is imported as a script to site.\n * Connascence of value with console-api/app/services/cache_manifest/constants.rb\n */\nexport const EDGIO_CACHE_MANIFEST_JS_VAR_NAME = '__EDGIO_CACHE_MANIFEST__'\n\n/**\n * The base path of the URL where the install.js file of @edgio/prefetch is served from CDN.\n * Connascence of value with console-api/app/services/edge_control/internal_config.rb\n */\nexport const EDGIO_PREFETCH_CDN_BASE_PATH = '/__edgio__/prefetch'\n\n/**\n * The path in express style where the install.js file of @edgio/prefetch is served from CDN.\n * Connascence of value with console-api/app/services/edge_control/internal_config.rb\n * @example /__edgio__/prefetch/install.js\n * @example /__edgio__/prefetch/v7.2.2/install.js\n */\nexport const EDGIO_PREFETCH_CDN_PATH = `${EDGIO_PREFETCH_CDN_BASE_PATH}/:path*`\n\n/**\n * The path in express style where the service-worker file of @edgio/prefetch is served from CDN.\n * Connascence of value with console-api/app/services/edge_control/internal_config.rb\n * @example /__edgio__service_worker_v7.2.2.js\n */\nexport const EDGIO_PREFETCH_CDN_SW_PATH = '/__edgio__service_worker_:version.js'\n\n/**\n * The value of cache-manifest rule comment which indicates that the rule should be ignored when\n * building cache-manifest by console-api. This allows customers to exclude certain rules from it.\n * We simulate it here in @edgio/core to provide the same experience in local simulation.\n * Connascence of value with console-api/app/services/cache_manifest/cache_manifest_builder.rb\n */\nexport const EDGIO_CACHE_MANIFEST_RULE_IGNORE_COMMENT = 'cache-manifest-ignore'\n\n/**\n * Is current environment 'browser'\n */\nexport const IS_BROWSER = typeof window !== 'undefined'\n\n/**\n * Brotli encoding code.\n */\nexport const BROTLI_ENCODING = 'br'\n\n/**\n * Gzip encoding code.\n */\nexport const GZIP_ENCODING = 'gzip'\n\n/**\n * Deflate encoding code.\n */\nexport const DEFLATE_ENCODING = 'deflate'\n\n/**\n * One year in seconds\n */\nexport const FAR_FUTURE_TTL = '1y'\n\nexport const INVOKE_SOURCES = {\n  functionUrl: 'function-url',\n  console: 'console',\n  bufferProxy: 'buffer-proxy',\n} as const\n\nexport type InvokeSource = (typeof INVOKE_SOURCES)[keyof typeof INVOKE_SOURCES]\n\nexport const INVOKE_ACTIONS = {\n  getEdgeConfig: 'getEdgeConfig',\n  getPreloadConfig: 'getPreloadConfig',\n  serverless: 'serverless',\n  simulator: 'simulator',\n} as const\n\nexport type InvokeAction = (typeof INVOKE_ACTIONS)[keyof typeof INVOKE_ACTIONS]\n\n// althought this seems like simple ready message, this message is also important for the\n// handler.ts to detect that the server is ready to accept requests\n// NOTE: Do not use formmating (chalk, colors) in this message, as colors and chalk are not\n// are not alwayse preserved between spwaned processes (handler will not be able to detect the message)\nexport const EDGIO_READY_MESSAGE = '> Edgio ready on '\n", "enum LogLevel {\n  TRACE,\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n}\n\ntype LogLevelStrings = keyof typeof LogLevel\nconst key = <LogLevelStrings>process.env.LOG_LEVEL?.toUpperCase()\nconst configuredLogLevel = key ? LogLevel[key] : LogLevel.INFO\n\nconst logger = {\n  trace(...params: any[]) {\n    logger.log(LogLevel.TRACE, ...params)\n  },\n\n  debug(...params: any[]) {\n    logger.log(LogLevel.DEBUG, ...params)\n  },\n\n  info(...params: any[]) {\n    logger.log(LogLevel.INFO, ...params)\n  },\n\n  warn(...params: any[]) {\n    logger.log(LogLevel.WARN, ...params)\n  },\n\n  error(...params: any[]) {\n    logger.log(LogLevel.ERROR, ...params)\n  },\n\n  log(level: number, ...params: any[]) {\n    // If given a single function as a param, call it and log the result\n    // This allows us to skip computation of expensive log output if it would\n    // not be shown based on the configured level\n    if (params.length === 1 && typeof params[0] === 'function') {\n      params = [params[0]()]\n    }\n    if (configuredLogLevel != null && configuredLogLevel <= level) {\n      console.log(`${LogLevel[level].padEnd(5, ' ')}`, ...params)\n    }\n  },\n}\n\nexport default logger\n", "export interface EdgioErrorOptions {\n  title: string\n  message: string\n  statusCode: number\n  statusMessage?: string\n  level?: number\n  details?: string\n  stack?: string\n}\n\nexport interface EdgioErrorRenderOptions {\n  type?: 'html' | 'json'\n  requestId?: string\n  includeStack?: boolean\n}\n\nexport class EdgioError extends Error {\n  readonly title: string\n  readonly message: string\n  readonly statusCode: number\n  readonly statusMessage: string\n  readonly level: number\n  readonly details?: string\n  readonly stack?: string\n\n  constructor({\n    title,\n    message,\n    statusCode,\n    statusMessage,\n    level,\n    details,\n    stack,\n  }: EdgioErrorOptions) {\n    super(`${title}: ${message}`)\n    this.statusCode = statusCode\n    this.statusMessage = statusMessage || title\n    this.title = title\n    this.message = message\n    this.level = level || 0\n    this.details = details\n    // The stack trace of the original error\n    // if the error was caught and wrapped,\n    // so we don't lose the context.\n    this.stack = stack || this.details || this.stack\n  }\n\n  public render(options: EdgioErrorRenderOptions = {}): string {\n    let values: Record<string, string | string[] | number | undefined> = {\n      title: this.title,\n      message: this.message,\n      statusCode: this.statusCode,\n      statusMessage: this.statusMessage,\n      level: this.level,\n      details: this.details,\n    }\n\n    if (options?.requestId) values.requestId = options.requestId\n    if (options?.includeStack) values.stack = this.stack?.split('\\n')\n\n    if (options.type === 'json') {\n      return JSON.stringify(values, null, 2)\n    }\n\n    return getEdgioErrorAsHtml(values)\n  }\n\n  getType() {\n    return 'EdgioError'\n  }\n}\n\nexport const isEdgioError = (error: any): error is EdgioError => {\n  return error.getType && error.getType() === 'EdgioError'\n}\n\n/**\n * Returns a string of HTML content for the EdgioError\n * with inserted values.\n * @param values\n * @returns {string}\n */\nexport const getEdgioErrorAsHtml = (\n  values: Record<string, string | string[] | number | undefined>\n): string => `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>${values.title}</title>\n  <style>\n    html, body, div, span, applet, object, iframe,\n    h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n    a, abbr, acronym, address, big, cite, code,\n    del, dfn, em, img, ins, kbd, q, s, samp,\n    small, strike, strong, sub, sup, tt, var,\n    b, u, i, center,\n    dl, dt, dd, ol, ul, li,\n    fieldset, form, label, legend,\n    table, caption, tbody, tfoot, thead, tr, th, td,\n    article, aside, canvas, details, embed,\n    figure, figcaption, footer, header, hgroup,\n    menu, nav, output, ruby, section, summary,\n    time, mark, audio, video {\n      margin: 0;\n      padding: 0;\n      border: 0;\n      font-size: 100%;\n      font: inherit;\n      vertical-align: baseline;\n    }\n    article, aside, details, figcaption, figure,\n    footer, header, hgroup, menu, nav, section {\n      display: block;\n    }\n    body {\n      line-height: 1;\n    }\n    ol, ul {\n      list-style: none;\n    }\n    blockquote, q {\n      quotes: none;\n    }\n    blockquote:before, blockquote:after,\n    q:before, q:after {\n      content: '';\n      content: none;\n    }\n    table {\n      border-collapse: collapse;\n      border-spacing: 0;\n    }\n    :root {\n      --primary-bg-color: #fff;\n      --primary-fg--color: #000;\n      --primary-path-color: rgba(0,0,0,0.15);\n      --secondary-path-color: rgba(0,0,0,0.08);\n    }\n    @media (prefers-color-scheme: dark) {\n      :root {\n        --primary-bg-color: #202020;\n        --primary-fg--color: #fff;\n        --primary-path-color: rgba(255,255,255,0.15);\n        --secondary-path-color: rgba(255,255,255,0.08);\n      }\n    }\n    body {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      font-family: \"Inter\", sans-serif;\n      min-height: 90vh;\n      text-align: center;\n      font-weight: 300;\n      line-height: 1.4;\n      font-size: calc(14px + 0.25vw);\n      overflow-x: hidden;\n      overflow-y: auto;\n      background: var(--primary-bg-color);\n      color: var(--primary-fg--color);\n    }\n    h1 {\n      font-size: 2em;\n      font-weight: 500;\n      margin: 0.75em 0;\n    }\n    p{\n      margin: 0.8em 0;\n    }\n    a {\n        color: #37a2e2;\n        text-decoration: none;\n    }\n    a:hover {\n        text-decoration: underline;\n    }\n    .request-id, .error-details, .details {\n        opacity: 0.7;\n        margin: 0.25em 0 0 0;\n        font-size: 0.9em;\n    }\n    .container{\n      width: 100%;\n      max-width: 45em;\n      padding: 6em 2em 2em 2em;\n      text-align: center;\n      background: var(--primary-bg-color);\n      box-sizing: border-box;\n      position: relative;\n      @media (max-width: 45em) {\n        overflow: hidden;\n      }\n    }\n    .container::before{\n      content:'';\n      left:50%;\n      top:50%;\n      transform: translate(-50%, -50%);\n      position: absolute;\n      display: block;\n      width:100vw;\n      height:0.5em;\n      background: linear-gradient(to left, rgba(0,0,0,0) 0%, var(--primary-path-color) 10%, var(--primary-path-color) 90%, rgba(0,0,0,0) 100%);\n      z-index:-1;\n    }\n    .logo{\n      display: block;\n      margin: 2em auto 0 auto;\n      height: 4.5em;\n    }\n    .sites-logo{\n      display: block;\n      position: sticky;\n      margin: 2em auto 0 auto;\n      height: 1.5em;\n      color: var(--primary-path-color);\n    }\n    .cable svg{\n      width: 6em;\n      height: auto;\n      position: absolute;\n      top:50%;\n      transform: translate(0, -50%);\n      background: var(--primary-bg-color);\n      color: var(--primary-path-color);\n    }\n    .cable .left-plug{\n      left:-6em;\n    }\n    .cable .right-plug{\n      right:-6em;\n    }\n  </style>\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n  <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;500&display=swap\" rel=\"stylesheet\">\n</head>\n<body>\n  <div class=\"container\">\n    <!--  \n    <svg class=\"sites-logo\" xmlns=\"http://www.w3.org/2000/svg\" width=\"318\" height=\"96\" viewBox=\"0 0 318 96\" fill=\"none\">\n      <g clip-path=\"url(#clip0_842_606)\"><path d=\"M215.333 87.9768L213.268 87.9746C205.172 87.8097 197.92 84.1178 192.96 78.345C192.746 78.0958 192.455 77.6247 192.507 76.9428C192.56 76.261 192.967 75.7465 193.22 75.5461L200.565 69.733C200.81 69.5389 201.334 69.2858 201.86 69.3162C202.416 69.3482 202.974 69.6752 203.175 69.8965C205.824 72.8077 209.568 74.647 213.568 74.647L215.333 74.6435C218.647 74.6435 221.333 71.9572 221.333 68.6435C221.333 65.3298 218.647 62.6435 215.333 62.6435H210.666C200.298 62.2809 192 53.7646 192 43.3102C192 32.6327 200.642 24.0001 211.32 24.0001H211.987C220.083 24.1649 227.464 27.8591 232.424 33.6319C232.638 33.8811 232.929 34.3522 232.876 35.034C232.824 35.7159 232.417 36.2304 232.164 36.4307L224.819 42.2438C224.574 42.4379 224.05 42.691 223.524 42.6607C222.968 42.6287 222.41 42.3017 222.209 42.0804C219.56 39.1691 215.816 37.3299 211.816 37.3299L210.879 37.3272C207.777 37.5593 205.333 40.1493 205.333 43.3102C205.333 46.6239 208.019 49.3102 211.333 49.3102H216C226.369 49.6735 234.666 58.1895 234.666 68.6435C234.666 79.321 226.011 87.9768 215.333 87.9768ZM23.3333 87.9768L21.2686 87.9746C13.1717 87.8097 5.9201 84.1178 0.960054 78.345C0.745895 78.0958 0.455309 77.6247 0.50771 76.9428C0.560111 76.261 0.967351 75.7465 1.22052 75.5461L8.56483 69.733C8.81007 69.5389 9.33408 69.2858 9.86037 69.3162C10.4165 69.3482 10.9743 69.6752 11.1756 69.8965C13.8238 72.8077 17.5682 74.647 21.5681 74.647L23.3333 74.6435C26.647 74.6435 29.3333 71.9572 29.3333 68.6435C29.3333 65.3298 26.647 62.6435 23.3333 62.6435H18.6666C8.2979 62.2809 0 53.7646 0 43.3102C0 32.6327 8.64271 24.0001 19.3202 24.0001H19.9869C28.0837 24.1649 35.4643 27.8591 40.4243 33.6319C40.6385 33.8811 40.929 34.3522 40.8766 35.034C40.8242 35.7159 40.417 36.2304 40.1638 36.4307L32.8195 42.2438C32.5743 42.4379 32.0503 42.691 31.524 42.6607C30.9679 42.6287 30.41 42.3017 30.2087 42.0804C27.5605 39.1691 23.8162 37.3299 19.8162 37.3299L18.879 37.3272C15.7775 37.5593 13.3333 40.1493 13.3333 43.3102C13.3333 46.6239 16.0196 49.3102 19.3333 49.3102H24C34.3694 49.6735 42.6666 58.1895 42.6666 68.6435C42.6666 79.321 34.0108 87.9768 23.3333 87.9768ZM62.1113 21.7501C62.9858 21.0752 64.2417 21.237 64.9166 22.1115C65.1867 22.4615 65.3333 22.8912 65.3333 23.3334V85.3333C65.3333 86.8061 64.1394 88 62.6666 88H54.6666C53.1938 88 51.9999 86.8061 51.9999 85.3333V30.8639C51.9999 30.0375 52.3831 29.2577 53.0374 28.7528L62.1113 21.7501ZM62.6666 2.66676C64.1394 2.66676 65.3333 3.86067 65.3333 5.33342V13.3334C65.3333 14.8062 64.1394 16.0001 62.6666 16.0001H54.6666C53.1938 16.0001 51.9999 14.8062 51.9999 13.3334V5.33342C51.9999 3.86067 53.1938 2.66676 54.6666 2.66676H62.6666ZM152 24.0001C169.673 24.0001 184 38.3269 184 56L183.993 56.6509L184 56.7544V58.935C184 60.2605 182.925 61.335 181.6 61.335L160.442 61.3495L134.384 61.3364C133.6 61.335 133.6 62.135 133.904 62.9684C136.613 70.3853 143.653 74.6667 152 74.6667C153.443 74.6667 154.849 74.5679 156.201 74.3463C160.194 73.5214 163.652 71.4885 166.266 68.6925L166.48 68.457C166.889 68.0624 167.323 67.8534 167.782 67.8299C168.515 67.7923 168.931 68.0926 169.091 68.2077L176.446 73.5072C176.793 73.7574 177.135 74.2112 177.213 74.6667C177.331 75.3496 177.188 75.9277 176.784 76.4009C172.117 82.0583 165.519 86.1355 157.77 87.5019C156.561 87.7149 155.357 87.8565 154.16 87.9296L153.732 87.9539C153.158 87.9845 152.581 88 152 88C134.327 88 120 73.6731 120 56C120 38.3269 134.327 24.0001 152 24.0001ZM91.5832 0.778181C91.8534 1.12823 91.9999 1.55793 91.9999 2.00009V23.9774L119.333 23.9769C119.766 23.9769 120.187 24.1173 120.533 24.3769C121.417 25.0396 121.596 26.2932 120.933 27.1769L115.667 36.6436C115.289 37.1472 114.696 37.4435 114.066 37.4435L91.9999 37.3227V67.9768C91.9999 71.5618 94.8296 74.4859 98.3774 74.6373L98.6666 74.6435H108C109.473 74.6435 110.667 75.8374 110.667 77.3102V85.3102C110.667 86.7829 109.473 87.9768 108 87.9768H98.6666C87.8521 87.9768 79.0424 79.3935 78.6783 68.6677L78.6666 9.5306C78.6666 8.70416 79.0498 7.92442 79.704 7.4195L88.778 0.41677C89.6524 -0.258074 90.9084 -0.096265 91.5832 0.778181ZM152 37.3334C145.383 37.3334 139.588 40.8475 136.377 46.1112L136.158 46.4812C135.315 47.8735 135.885 47.9895 136.572 47.9992H167.427C168.084 47.9899 168.633 47.8837 167.948 46.6626L167.842 46.4805C164.681 41.0125 158.77 37.3334 152 37.3334ZM264 26.6667L264 45.3334C254.732 43.2306 247.437 35.9354 245.333 26.6678L264 26.6667ZM272 26.6667L272 45.3334C281.268 43.2306 288.563 35.9354 290.667 26.6678L272 26.6667ZM264 0.000371257L263.999 18.6667L245.333 18.667C247.436 9.39898 254.732 2.10322 264 0.000371257ZM288 9.72848e-05C289.472 9.72848e-05 290.666 1.194 290.666 2.66676V18.6667H272V9.72848e-05H288Z\" fill=\"currentColor\"/></g><defs><clipPath id=\"clip0_842_606\"><rect width=\"317.091\" height=\"96\" fill=\"currentColor\"/></clipPath></defs>\n    </svg>\n    -->\n    <div class=\"content\">\n      <h1>${values.title}</h1>\n      <p>This website is having some trouble presenting content. Please try again later.</p>\n      <p>${values.message}</p>\n      ${values.details ? `<div class=\"details\">Details: ${values.details}</div>` : ''}\n      ${values.requestId ? `<div class=\"request-id\">Request ID: ${values.requestId}</div>` : ''}\n      <div class=\"error-details\">\n        Error Code: ${values.statusCode} | Error Level: ${values.level}\n      </div>\n      <svg class=\"logo\" version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1857.6 770.5\" xml:space=\"preserve\" height=\"100\" fill=\"none\">\n        <defs>\n          <linearGradient id=\"gradient\">\n            <stop offset=\"0%\" stop-color=\"#80288e\" />\n            <stop offset=\"50%\" stop-color=\"#128fb2\" />\n            <stop offset=\"100%\" stop-color=\"#00ac75\" />\n          </linearGradient>\n        </defs>\n        <g>\n          <path style=\"fill:url(#gradient)\" d=\"M391.2,122.6l58.5-106.1H0v580.3h384.7l-58.5-106.1H115.6V357.3h202l32.5-106.2H115.6V122.6H391.2z    M670.7,94.8v142.3c-19.8-23.7-45.7-41.4-80.4-48.9c-12.4-2.5-25-3.8-37.7-3.8c-111.1,0-194.4,90.8-194.4,211.4   c0,7.9,0.4,15.7,1.1,23.4c9.9,108.8,89.5,187.9,193.2,187.9c55.1,0,93.7-21.9,120.2-54.7v44.4h105.7V0L670.7,94.8z M572.5,506.5   c-63.4,0-103.6-49.3-103.6-110.7s40.2-110.7,103.6-110.7c61.8,0,103.7,47.3,103.7,110.7S634.3,506.5,572.5,506.5z M1128.5,195.2   v44.8c-27.8-34.4-68-55.5-124.3-55.5c-97.8,0-184.9,81.6-184.9,205.2c0,123.1,87.1,204.7,184.9,204.7c4.1,0,8.1-0.1,12-0.4h13.1   c49.7-2.7,72.7-22.8,98.5-53.8v28.2c0,69.7-47.3,106.5-114.4,106.5c-23,0.1-45.8-3.3-67.8-10.1L871.1,739   c42.5,20.8,95.7,31.5,146.7,31.5c132.6,0,216.8-77.5,216.8-206.8V195.2L1128.5,195.2z M1031.5,494.9   c-61.7,0-101.1-47.3-101.1-105.3c0-58.5,39.4-105.7,101.1-105.7c60.1,0,100.8,45.6,100.8,105.7   C1132.3,449.2,1091.6,494.9,1031.5,494.9L1031.5,494.9z M1280.7,290.4v306.4h108.2V195.2L1280.7,290.4z M1640,184.4   c-124.8,0-216.8,90.4-216.8,211.4s92,211.4,216.8,211.4c125.2,0,217.6-90.4,217.6-211.4S1765.2,184.4,1640,184.4L1640,184.4z    M1640,506.4c-60.9,0-106.6-45.6-106.6-110.7s45.6-110.6,106.6-110.6c61.3,0,106.9,45.6,106.9,110.7S1701.3,506.5,1640,506.4   L1640,506.4z M1388.9,168.6h-108.2V60.5h108.2V168.6z\"/>\n        </g>\n      </svg>\n      <div class=\"cable\">\n        <svg class=\"left-plug\" width=\"75\" height=\"50\" viewBox=\"0 0 75 50\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\">\n          <defs>\n            <clipPath id=\"clip0_1_10\">\n              <rect id=\"svg_1\" fill=\"white\" height=\"49\" width=\"864\"/>\n            </clipPath>\n          </defs>\n          <g>\n            <title>Layer 1</title>\n            <path id=\"svg_3\" fill=\"currentColor\" d=\"m15.48622,35.72007l-10.75293,0c-1.23267,0 -2.41468,-0.5752 -3.28684,-1.5991c-0.87131,-1.0239 -1.361,-2.4126 -1.361,-3.8607l0,-9.6756c0,-0.7889 0.14691,-1.5683 0.4289,-2.2843c0.28115,-0.716 0.69232,-1.3515 1.20396,-1.8623l0,0c0.84007,-0.8436 1.90979,-1.3064 3.01498,-1.3049l10.75293,0l0,20.5869z\"/>\n            <path id=\"svg_4\" fill=\"currentColor\" d=\"m48.01045,46.48487l-25.437,0c-0.934,0 -1.859,-0.1825 -2.722,-0.5372c-0.863,-0.3548 -1.647,-0.8747 -2.308,-1.5301c-0.66,-0.6554 -1.184,-1.4334 -1.542,-2.2897c-0.357,-0.8562 -0.54,-1.7739 -0.54,-2.7006l0,-28.004c0,-0.92653 0.183,-1.84408 0.541,-2.70018c0.357,-0.85611 0.881,-1.63398 1.541,-2.28916c0.661,-0.65518 1.445,-1.17482 2.308,-1.52923c0.863,-0.35442 1.788,-0.53665 2.722,-0.53629l25.437,0l0,42.11646z\"/>\n            <path id=\"svg_5\" fill=\"currentColor\" d=\"m48.01245,2.59915l0,45.63842c0,0.9283 0.759,1.6808 1.695,1.6808l2.213,0c0.936,0 1.694,-0.7525 1.694,-1.6808l0,-45.63842c0,-0.92827 -0.758,-1.68078 -1.694,-1.68078l-2.213,0c-0.936,0 -1.695,0.75251 -1.695,1.68078z\"/>\n            <path id=\"svg_6\" fill=\"currentColor\" d=\"m53.61145,19.09747l0,-7.1876l17.313,0c0.961,0 1.882,0.3786 2.562,1.0526c0.679,0.6739 1.061,1.588 1.061,2.5412l0,0c0,0.9531 -0.382,1.8672 -1.061,2.5412c-0.68,0.6739 -1.601,1.0526 -2.562,1.0526l-17.313,0z\"/>\n            <path id=\"svg_7\" fill=\"currentColor\" d=\"m74.54445,35.33037c0,0.9531 -0.382,1.8672 -1.061,2.5411c-0.679,0.674 -1.601,1.0526 -2.562,1.0526l-17.298,0l0,-7.1875l17.301,0c0.96,0.0007 1.881,0.3796 2.56,1.0535c0.679,0.6739 1.06,1.5876 1.06,2.5403z\"/>\n            <path id=\"svg_8\" fill=\"currentColor\" d=\"m48.01045,46.48487l-25.437,0c-0.934,0 -1.859,-0.1825 -2.722,-0.5372c-0.863,-0.3548 -1.647,-0.8747 -2.308,-1.5301c-0.66,-0.6554 -1.184,-1.4334 -1.542,-2.2897c-0.357,-0.8562 -0.54,-1.7739 -0.54,-2.7006l0,-28.004c0,-0.92653 0.183,-1.84408 0.541,-2.70018c0.357,-0.85611 0.881,-1.63398 1.541,-2.28916c0.661,-0.65518 1.445,-1.17482 2.308,-1.52923c0.863,-0.35442 1.788,-0.53665 2.722,-0.53629c2.118,30.25146 25.437,33.02976 25.437,33.02976l0,9.0867z\"/>\n            <path id=\"svg_9\" fill=\"currentColor\" d=\"m37.25845,46.48487l-14.685,0c-0.934,0 -1.859,-0.1825 -2.722,-0.5372c-0.863,-0.3548 -1.647,-0.8747 -2.308,-1.5301c-0.66,-0.6554 -1.184,-1.4334 -1.542,-2.2897c-0.357,-0.8562 -0.54,-1.7739 -0.54,-2.7006l0,-19.6691c0,19.8626 21.797,26.7267 21.797,26.7267z\"/>\n            <path id=\"svg_10\" fill=\"currentColor\" d=\"m15.46145,35.72007l-9.871,0c-1.46,0 -2.86,-0.5752 -3.893,-1.5991c-1.032,-1.0239 -1.612,-2.4126 -1.612,-3.8607l0,-9.6756c0,-0.7889 0.174,-1.5683 0.508,-2.2843c0.333,-0.716 0.82,-1.3515 1.426,-1.8623l0,0c-1.867,15.0939 13.442,17.3995 13.442,17.3995l0,1.8825z\"/>\n          </g>\n        </svg>\n        <svg class=\"right-plug\" width=\"75\" height=\"50\" viewBox=\"0 0 75 50\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\">\n        <defs>\n          <clipPath id=\"clip0_1_10\">\n            <rect width=\"864\" height=\"49\" fill=\"white\" id=\"svg_1\"/>\n          </clipPath>\n        </defs>\n        <g>\n          <title>Layer 2</title>\n          <path fill=\"currentColor\" d=\"m59.50468,35.73201l10.73944,0c0.60975,0.0004 1.21361,-0.1405 1.77697,-0.4148c0.56337,-0.2742 1.07529,-0.6763 1.5071,-1.1833c0.43096,-0.507 0.77337,-1.109 1.00698,-1.7716c0.23277,-0.6626 0.35337,-1.3728 0.35337,-2.0901l0,-9.6756c-0.00084,-0.7888 -0.14675,-1.5681 -0.42843,-2.284c-0.28168,-0.7159 -0.6924,-1.3514 -1.20264,-1.8626l0,0c-0.83915,-0.8444 -1.90685,-1.3074 -3.01082,-1.3049l-10.73944,0l-0.00253,20.5869z\" id=\"svg_3\"/>\n          <path fill=\"currentColor\" d=\"m26.96155,46.49681l25.439,0c1.887,-0.0007 3.696,-0.7446 5.029,-2.0681c1.334,-1.3235 2.083,-3.1182 2.083,-4.9895l0,-28.004c0,-1.87104 -0.749,-3.66548 -2.083,-4.98853c-1.334,-1.32305 -3.143,-2.06633 -5.029,-2.06633l-25.439,0l0,42.11646z\" id=\"svg_4\"/>\n          <path fill=\"currentColor\" d=\"m21.36255,2.61109l0,45.63842c0,0.9283 0.758,1.6808 1.694,1.6808l2.213,0c0.936,0 1.695,-0.7525 1.695,-1.6808l0,-45.63842c0,-0.92827 -0.759,-1.68077 -1.695,-1.68077l-2.213,0c-0.936,0 -1.694,0.7525 -1.694,1.68077z\" id=\"svg_5\"/>\n          <path fill=\"currentColor\" d=\"m37.71355,46.49681l14.687,0c1.887,-0.0007 3.696,-0.7446 5.029,-2.0681c1.334,-1.3235 2.083,-3.1182 2.083,-4.9895l0,-19.6691c0,19.8626 -21.799,26.7267 -21.799,26.7267z\" id=\"svg_6\"/>\n          <path fill=\"currentColor\" d=\"m59.51255,35.73201l9.869,0c0.723,0.0004 1.439,-0.1405 2.107,-0.4148c0.668,-0.2742 1.275,-0.6763 1.787,-1.1833c0.511,-0.507 0.917,-1.109 1.194,-1.7716c0.276,-0.6626 0.419,-1.3728 0.419,-2.0901l0,-9.6756c-0.001,-0.7888 -0.174,-1.5681 -0.508,-2.284c-0.334,-0.7159 -0.821,-1.3514 -1.426,-1.8626l0,0c1.867,15.0939 -13.439,17.3995 -13.439,17.3995l-0.003,1.8825z\" id=\"svg_7\"/>\n        </g>\n        </svg>\n      </div>\n    </div>\n  </div>\n</body>\n</html>`\n", "export const supportLink = '<a href=\"https://edg.io/contact-support\">support</a>'\nexport const serverLogsLink =\n  '<a href=\"https://docs.edg.io/guides/v7/logs/server_logs\">server logs</a>'\nexport const jsPerformanceProfilingLink =\n  '<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance\">JS performance profiling</a>'\nexport const limitsLink = '<a href=\"https://docs.edg.io/guides/v7/performance/limits\">limits</a>'\n", "import { EdgioError } from './EdgioError'\nimport { limitsLink, serverLogsLink } from './edgioErrorLinks'\n\n/*\n  This error is triggered when default Node's value (80KB) for the maximum size of the response headers is exceeded.\n  See https://github.com/nodejs/http-parser/blob/678a9e21f11e5ea93e5e17a2302390f88a6a8c46/http_parser.h#L64\n */\nexport class EdgioHeadersOverflowError extends EdgioError {\n  constructor(details: string = 'HPE_HEADER_OVERFLOW', stack?: string) {\n    super({\n      statusCode: 542,\n      title: 'Edgio Headers Overflow',\n      message: `The project's cloud function returned HTTP response headers with an overall size greater than 80KB or single header with value greater than 32KB. If you are the website administrator, please use ${serverLogsLink} to debug and decrease the response headers size. See: ${limitsLink}`,\n      level: 1,\n      details,\n      stack,\n    })\n  }\n}\n", "import { EdgioError } from './EdgioError'\nimport { supportLink } from './edgioErrorLinks'\n\nexport class EdgioInternalError extends EdgioError {\n  constructor(details?: string, stack?: string, code?: string) {\n    super({\n      statusCode: 530,\n      title: 'Edgio Internal Error',\n      message: `Unexpected error in one of Edgio's cloud function components. If you are the website administrator, please contact the ${supportLink} immediately.`,\n      level: 1,\n      details,\n      stack,\n    })\n  }\n}\n", "import { EdgioError } from './EdgioError'\nimport { serverLogsLink } from './edgioErrorLinks'\n\nexport class EdgioProjectCrashedError extends EdgioError {\n  constructor(details?: string, stack?: string) {\n    super({\n      statusCode: 549,\n      title: 'Edgio Project Crashed',\n      message: `The project's cloud function crashed unexpectedly because of fatal error in project's code or undesired process.exit call somewhere in the third party code. If you are the website administrator, please use ${serverLogsLink} to debug this issue.`,\n      level: 1,\n      details,\n      stack,\n    })\n  }\n}\n", "import { EdgioError } from './EdgioError'\nimport { serverLogsLink } from './edgioErrorLinks'\n\nexport class EdgioOutOfResourcesError extends EdgioError {\n  constructor(details?: string) {\n    super({\n      statusCode: 540,\n      title: 'Edgio Project Out Of Resources',\n      message: `The project's cloud function crashed because of an out-of-memory situation. If you are the website administrator, please use ${serverLogsLink} to debug and lower the resources usage.`,\n      level: 1,\n      details,\n    })\n  }\n}\n", "import { EdgioError } from './EdgioError'\nimport { jsPerformanceProfilingLink, serverLogsLink } from './edgioErrorLinks'\n\nexport class EdgioProjectTimeoutError extends EdgioError {\n  constructor(details?: string) {\n    super({\n      statusCode: 539,\n      title: 'Edgio Project Timeout',\n      message: `The project's cloud function did not respond on time, either due to slow upstreams, loops or badly handled asynchronous requests in code (e.g. missing \"await\" or call to \"callback\"). If you are the website administrator, please use ${serverLogsLink} and ${jsPerformanceProfilingLink} to debug.`,\n      level: 1,\n      details,\n    })\n  }\n}\n", "import { EdgioError } from './EdgioError'\nimport { limitsLink, serverLogsLink } from './edgioErrorLinks'\n\nexport class EdgioResponseTooLargeError extends EdgioError {\n  constructor(details?: string) {\n    super({\n      statusCode: 532,\n      title: 'Edgio Project Response Too Large',\n      message: `The project's cloud function returned a response with body size greater than the allowed 6MB uncompressed. If you are the website administrator, please use ${serverLogsLink} to debug and lower the response size. See: ${limitsLink}`,\n      level: 1,\n      details,\n    })\n  }\n}\n", "import type { APIGatewayProxyEventV2 } from 'aws-lambda'\nimport { HTTP_HEADERS, INVOKE_ACTIONS, INVOKE_SOURCES, InvokeAction } from '../constants'\nimport querystring from 'querystring'\n\nexport type BufferProxyEvent = {\n  httpMethod: string\n  path: string\n  rawUrl?: string\n  headers: { [key: string]: string | string[] }\n  multiValueQueryStringParameters: { [key: string]: string[] }\n  multiValueHeaders: { [key: string]: string[] }\n  body: string\n  isBase64Encoded: boolean\n  requestContext: {\n    httpMethod: string\n    resourcePath: string\n    path: string\n    stage: string\n  }\n}\n\nexport type ConsoleEvent = {\n  action: InvokeAction\n}\n\nexport type UnknownEvent =\n  | APIGatewayProxyEventV2\n  | BufferProxyEvent\n  | {\n      [key: string]: any\n    }\n\nexport function isConsoleEvent(event: UnknownEvent): event is ConsoleEvent {\n  return 'action' in event\n}\nexport function isApiGatewayV2Event(event: UnknownEvent): event is APIGatewayProxyEventV2 {\n  return 'version' in event && event.version === '2.0'\n}\n\nexport function isBufferProxyEvent(event: UnknownEvent): event is BufferProxyEvent {\n  return 'multiValueHeaders' in event\n}\n\nexport function methodFromEvent(event: UnknownEvent) {\n  if (isApiGatewayV2Event(event)) {\n    return event.requestContext.http.method\n  } else {\n    return event.httpMethod\n  }\n}\n\nexport function pathFromEvent(event: UnknownEvent) {\n  if (isApiGatewayV2Event(event)) {\n    return encodePath(fixRawPath(event.rawPath))\n  } else {\n    return event.path ? encodePath(event.path) : undefined\n  }\n}\n\nexport function searchFromEvent(event: UnknownEvent) {\n  if (isApiGatewayV2Event(event)) {\n    // We parse query string here, to decode encoded characters\n    // and then encode them again to get normalized query string.\n    // This is necessary, otherwise node would throw an error if special characters are not encoded\n    // and we also don't want to encode it twice.\n    // NOTE: SearchParams.toString() encodes spaces as '+' instead of '%20'.\n    // Both ways are valid but with XBP spaces are encoded as '%20', so we want to keep it consistent.\n    if (!event.rawQueryString) return ''\n    const parsedQueryString = querystring.parse(event.rawQueryString)\n    return `?${querystring.stringify(parsedQueryString)}`\n  } else if (isBufferProxyEvent(event)) {\n    return normalizeLambdaQuery(event)\n  } else {\n    return undefined\n  }\n}\n\nexport function singleValueHeadersFromEvent(event: UnknownEvent): {\n  [key: string]: string\n} {\n  if (isApiGatewayV2Event(event)) {\n    return event.headers as { [key: string]: string }\n  } else if (isBufferProxyEvent(event)) {\n    return Object.fromEntries(\n      Object.entries(event.multiValueHeaders).map(([key, value]) => [key, value[0]])\n    )\n  } else {\n    return {}\n  }\n}\n\nexport function headerValueFromEvent(event: UnknownEvent, headerName: string): string | undefined {\n  const headers = singleValueHeadersFromEvent(event)\n  return headers[headerName] || headers[headerName.toLowerCase()]\n}\n\nexport function cookiesFromEvent(event: UnknownEvent): string[] {\n  if (isApiGatewayV2Event(event)) {\n    return event.cookies || []\n  } else if (isBufferProxyEvent(event)) {\n    return event.multiValueHeaders.cookie || []\n  } else {\n    return []\n  }\n}\n\nexport function urlFromEvent(event: UnknownEvent): string | undefined {\n  if (isApiGatewayV2Event(event)) {\n    return fixRawPath(event.rawPath) + (event.rawQueryString ? `?${event.rawQueryString}` : '')\n  } else if (isBufferProxyEvent(event)) {\n    return event.rawUrl || event.path + normalizeLambdaQuery(event)\n  } else {\n    return undefined\n  }\n}\n\nexport function requestIdFromEvent(event: UnknownEvent | UnknownEvent) {\n  if (isApiGatewayV2Event(event)) {\n    return event.headers[HTTP_HEADERS.xRequestId] || event.headers[HTTP_HEADERS.xEcUUID]\n  } else if (isBufferProxyEvent(event)) {\n    return (\n      flattenArray(event.multiValueHeaders[HTTP_HEADERS.xRequestId]) ||\n      flattenArray(event.multiValueHeaders[HTTP_HEADERS.xEcUUID])\n    )\n  } else {\n    return undefined\n  }\n}\n\nexport function invokeSourceFromEvent(event: UnknownEvent) {\n  if (isApiGatewayV2Event(event)) {\n    return INVOKE_SOURCES.functionUrl\n  } else if (isBufferProxyEvent(event)) {\n    return INVOKE_SOURCES.bufferProxy\n  } else if (isConsoleEvent(event)) {\n    return INVOKE_SOURCES.console\n  }\n  throw new Error('Unknown event type')\n}\n\nexport function invokeActionFromEvent(event: UnknownEvent): InvokeAction {\n  // When x-cloud-functions-hint header is present, we want to run only the serverless code\n  // and skip the simulator (behind the Edge).\n  // When we run the function locally, or when we invoke function directly through the Function URL,\n  // we want to run the simulator. This is also useful for testing and debugging.\n\n  if (isConsoleEvent(event)) {\n    return event.action\n  }\n  if (isApiGatewayV2Event(event)) {\n    const cloudFunctionsHintHeader = event.headers[HTTP_HEADERS.xCloudFunctionsHint]\n    return cloudFunctionsHintHeader ? INVOKE_ACTIONS.serverless : INVOKE_ACTIONS.simulator\n  }\n  if (isBufferProxyEvent(event)) {\n    const cloudFunctionsHintHeader = event.multiValueHeaders[HTTP_HEADERS.xCloudFunctionsHint]\n    return cloudFunctionsHintHeader ? INVOKE_ACTIONS.serverless : INVOKE_ACTIONS.simulator\n  }\n  throw new Error('Unknown event type')\n}\n\nfunction flattenArray(arr: string[] | string | undefined) {\n  return Array.isArray(arr) ? arr.join('') : arr\n}\n\n/**\n * Normalizes query to not have arrays if only one value of certain key exists\n */\nfunction normalizeLambdaQuery(event: any) {\n  let query\n  if (\n    event.multiValueQueryStringParameters &&\n    Object.keys(event.multiValueQueryStringParameters).length\n  ) {\n    Object.keys(event.multiValueQueryStringParameters).forEach(key => {\n      // keep backwards compatibility so that arrays with a single value are\n      // converted to just be that value:\n      const curVal = event.multiValueQueryStringParameters[key]\n      if (Array.isArray(curVal) && curVal.length === 1) {\n        event.multiValueQueryStringParameters[key] = curVal[0]\n      }\n    })\n    // Querystring.stringify serializes arrays as repeating keys\n    // by default: so we get correct 'a=b&a=c&a=d' instead of 'a[0]=b&a[1]=c&a[2]=d' format\n    // for input like { a: ['b', 'c', 'd'] }\n    query = querystring.stringify(event.multiValueQueryStringParameters)\n  }\n  return query ? '?' + query : ''\n}\n\n/**\n * Removes restricted headers and values from the headers object.\n * For example, all internal \"x-amzn-*\" headers are removed.\n * These headers are added by AWS into both Function URLs req and res.\n * If these headers are returned in the response,\n * for example because app proxies traffic to itself or another Edgio site,\n * AWS returns 500 status code with InternalFailure description.\n * @param headers Headers object\n */\nexport function sanitizeHeaders(headers: { [key: string]: string | string[] }) {\n  // Make copy of headers object with normalized keys to lower case\n  const sanitizedHeaders = Object.keys(headers).reduce((normalizedHeaders: typeof headers, key) => {\n    normalizedHeaders[key.toLowerCase()] = headers[key]\n    return normalizedHeaders\n  }, {})\n\n  Object.keys(sanitizedHeaders).forEach(key => {\n    // Remove all AWS internal headers to prevent 500 errors\n    if (key.startsWith('x-amzn-')) {\n      delete sanitizedHeaders[key]\n    }\n  })\n\n  // Remove transfer-encoding header when we are sending the buffered response to the client,\n  // otherwise Function URL just hangs and waits for the end of stream when the response is empty,\n  // even though we're not streaming from Lambda.\n  delete sanitizedHeaders['transfer-encoding']\n\n  return sanitizedHeaders\n}\n\n/**\n * Encodes just characters that are not valid in a URL path and\n * preserves all already encoded characters (to avoid double encoding).\n * @param path Path to encode\n * @returns Encoded path\n * @see https://datatracker.ietf.org/doc/html/rfc3986#section-3.3\n * @example encodePath('/path with spaces') => '/path%20with%20spaces' // encodes unencoded spaces\n * @example encodePath('/path%20with%20spaces') => '/path%20with%20spaces' // preserves encoded spaces\n * @example encodePath('/path%2B') => '/path%2B' // preserves encoded '+'\n * @example encodePath('/path+') => '/path+' // preserves unencoded '+'\n */\nexport function encodePath(path: string) {\n  return path.replace(/[^A-Za-z0-9\\-/.*()+$!~'@,;:&=_]/g, char => {\n    // Preserve already encoded character\n    if (char === '%') return char\n    // Encode the character\n    return encodeURIComponent(char)\n  })\n}\n/**\n * Fixes path sent by API Gateway v2.\n * When browser sends request path with '+', Function URL decodes it and gives us ' '.\n * This is not valid behavior. Spaces can be encoded as '+' only in query strings\n * with application/x-www-form-urlencoded but not in paths. In paths, spaces encoded only as '%20'.\n * When browser sends request path with ' ', or '%20', Function URL always decodes it to '%20'.\n * This is valid behavior.\n * We need to correct it here.\n * NOTE: It's a regional bug. I was able to reproduce it only with Function URL in us-east-1 region.\n * The us-east-2 region worked. But it is not just about the region, with dev aws account,\n * it worked in us-east-1 region too.\n */\nexport function fixRawPath(rawPath: string) {\n  // Replace ' ' with '+', because we know it was originally '+'\n  // and the actual space would be '%20'.\n  return rawPath.replace(/ /g, '+')\n}\n", "/**\n * NOTE: The number is not exactly 6MiB, because AWS has some additional overhead for the response\n * or doesn't measure the response size exactly. This number is based on the empirical testing\n * when the response was rejected by AWS with 502 Bad Gateway error.\n * Be careful when changing this number.\n */\nexport const RESPONSE_SIZE_LIMIT = 6277476\n\n/**\n * The amount of memory in MiB that is reserved for the main process 'handler.ts'\n * to prevent the crash of the whole lambda when the server process consumes all the memory.\n * It should be enough to handle the response and encode it to base64.\n * Default memory limit is 896MiB.\n */\nexport const HANDLER_RESERVED_MEMORY = 50\n\n/**\n * The time in milliseconds that is reserved for the main process 'handler.ts' to\n * finish all the operations and return the error response before the lambda actually times out.\n * Default timeout is 20s.\n */\nexport const HANDLER_RESERVED_TIME = 250\n\n/**\n * The time in milliseconds that handler.ts\n * waits for the response from the server process.\n */\nexport const HANDLER_REQUEST_TIMEOUT = 5 * 60 * 1000\n\n/**\n * The maximum size of single header value in bytes.\n * Function URLs return 502 Bad Gateway from awselb/2.0\n * when the header value is greater than 32KB (1000 in this case) 31.25KiB\n */\nexport const HANDLER_MAX_HEADER_VALUE_SIZE = 32 * 1000\n", "/**\n * Generates a random id of the given length\n * just from A-Z, a-z, 0-9 characters.\n * @param length The length of the id\n */\nexport function generateRandomId(length: number = 10) {\n  let result = ''\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length))\n  }\n  return result\n}\n", "import { generateRandomId } from '../utils/idUtils'\n\n/**\n * Object with the metrics for the current handler.ts instance\n */\nexport const metrics = {\n  handlerId: generateRandomId(),\n\n  // Times\n  handlerStartedAt: Date.now(),\n  serverStartedAt: undefined as number | undefined,\n  serverReadyAt: undefined as number | undefined,\n  handlerReqStartedAt: undefined as number | undefined,\n  handlerReqFinishedAt: undefined as number | undefined,\n  serverReqStartedAt: undefined as number | undefined,\n  serverReqFinishedAt: undefined as number | undefined,\n\n  // Counters\n  handlerReqCount: 0,\n  serverReqCount: 0,\n  handlerErrorCount: 0,\n\n  // Calculates durations\n  get handlerLifeTime() {\n    return Date.now() - this.handlerStartedAt\n  },\n  get serverLifeTime() {\n    return this.serverStartedAt ? Date.now() - this.serverStartedAt : 0\n  },\n  get handlerTime() {\n    return this.handlerReqStartedAt && this.handlerReqFinishedAt\n      ? this.handlerReqFinishedAt - this.handlerReqStartedAt\n      : 0\n  },\n  get serverTime() {\n    return this.serverReqStartedAt && this.serverReqFinishedAt\n      ? this.serverReqFinishedAt - this.serverReqStartedAt\n      : 0\n  },\n  get serverReadyTime() {\n    return this.serverReadyAt && this.serverStartedAt\n      ? this.serverReadyAt - this.serverStartedAt\n      : 0\n  },\n  get handlerColdStart() {\n    return this.handlerReqCount === 1\n  },\n  get serverColdStart() {\n    return this.serverReqCount === 1\n  },\n  get handlerRss() {\n    const { rss } = process.memoryUsage()\n    return Math.round((rss / 1024 / 1024) * 100) / 100\n  },\n  _handlerColdStartTime: undefined as number | undefined,\n  get handlerColdStartTime() {\n    if (this.handlerColdStart) this._handlerColdStartTime = this.handlerTime\n    return this._handlerColdStartTime\n  },\n  _serverColdStartTime: undefined as number | undefined,\n  get serverColdStartTime() {\n    if (this.serverColdStart) this._serverColdStartTime = this.serverTime\n    return this._serverColdStartTime\n  },\n  // Returns the serialized metrics\n  serialize(): string {\n    const shortcuts = {\n      // Handler ID - The unique ID of this handler instance.\n      hid: this.handlerId,\n      // Handler lifetime - The total time in ms this handler instance exists.\n      hlt: this.handlerLifeTime,\n      // Server lifetime - The total time in ms this server instance exists.\n      slt: this.serverLifeTime,\n      // Handler Request Count - The total number of requests this handler instance has processed.\n      hrc: this.handlerReqCount,\n      // Server Request Count - The total number of requests this server instance has processed.\n      src: this.serverReqCount,\n      // Handler Error Count - The total number of errors this handler instance has encountered.\n      hec: this.handlerErrorCount,\n      // Handler Memory RSS - The total memory in MiB occupied by the code segment, heap and stack of this process\n      hrss: this.handlerRss,\n      // Handler Time - The total time in ms this handler instance has spent from receiving the request to sending the response.\n      ht: this.handlerTime,\n      // Server Time - The total time in ms this server instance has spent from receiving the request to sending the response.\n      st: this.serverTime,\n      // Server Ready Time - The total time in ms this server instance has spent from starting to be ready to receive requests.\n      srt: this.serverReadyTime,\n      // Handler Cold Start - 1 If the handler is started for the first time, 0 otherwise.\n      hcs: this.handlerColdStart,\n      // Server Cold Start - 1 If the server is started for the first time, 0 otherwise.\n      scs: this.serverColdStart,\n      // Handler Cold Start Time - Returns the value of 'handlerTime' metric when handler was started for the first time.\n      hcst: this.handlerColdStartTime,\n      // Server Cold Start Time - Returns the value of 'serverTime' metric when server was started for the first time.\n      scst: this.serverColdStartTime,\n    }\n    return Object.entries(shortcuts)\n      .map(([key, value]) => `${key}=${value}`)\n      .join(',')\n  },\n}\n", "import DevServerOptions from '../dev/DevServerOptions'\nimport LambdaResponse from '../runtime/LambdaResponse'\nimport { RuntimeOptions } from './RuntimeOptions'\n\n// add to global scope write to stream\ndeclare global {\n  interface String {\n    writeToStream: (response: LambdaResponse) => void\n  }\n}\n\nString.prototype.writeToStream = function (response: LambdaResponse) {\n  response.sendResponse(this.toString())\n}\n\n/**\n * This class is used to store global variables that are used in the runtime,\n * but are not passed as parameters to the functions, instead they are stored\n * in the global scope. For instance, as we don't have a way to pass values\n * between prod.js or dev.js script, we do it here, by accesing the global scope.\n */\nexport class EdgioRuntimeGlobal {\n  static get runtimeOptions(): RuntimeOptions | undefined {\n    // @ts-ignore\n    return global.EDGIO_RUNTIME_OPTIONS\n  }\n\n  static set runtimeOptions(options: RuntimeOptions | undefined) {\n    // @ts-ignore\n    global.EDGIO_RUNTIME_OPTIONS = options\n  }\n\n  static get isCacheEnabled(): boolean {\n    // @ts-ignore\n    return global.isCacheEnabled ?? false\n  }\n\n  static set isCacheEnabled(value: boolean) {\n    // @ts-ignore\n    global.isCacheEnabled = value\n  }\n\n  static get devOptions(): DevServerOptions | undefined {\n    // @ts-ignore\n    return global.devOptions\n  }\n\n  static set devOptions(options: DevServerOptions | undefined) {\n    // @ts-ignore\n    global.devOptions = options\n  }\n}\n\nexport {}\n", "import { EDGIO_DEPLOYMENT_TYPE_AWS, EDGIO_ENV_VARIABLES } from './constants'\nimport { EdgioRuntimeGlobal } from './lambda/global.helpers'\n\n/**\n * Used to determine if the app is running in the cloud.\n * @returns `true` when running in the cloud, `false` otherwise\n */\nexport function isCloud(): boolean {\n  if (EdgioRuntimeGlobal.runtimeOptions !== undefined)\n    return EdgioRuntimeGlobal.runtimeOptions.isProductionBuild\n\n  return process.env[EDGIO_ENV_VARIABLES.deploymentType] === EDGIO_DEPLOYMENT_TYPE_AWS\n}\n\n/**\n * Returns true when running locally, either in dev or production mode\n */\nexport function isLocal(): boolean {\n  return (\n    EdgioRuntimeGlobal.runtimeOptions?.devMode || process.env[EDGIO_ENV_VARIABLES.local] === 'true'\n  )\n}\n\n/**\n * Used to determine if the app is running on a production build.\n * @returns `true` when running a production build, either locally or in the cloud; `false` otherwise\n */\nexport function isProductionBuild(): boolean {\n  if (EdgioRuntimeGlobal.runtimeOptions !== undefined)\n    return EdgioRuntimeGlobal.runtimeOptions.isProductionBuild\n\n  return (\n    // Users can change the value of NODE_ENV in the cloud https://docs.edg.io/guides/basics/environments#built-in-environment-variables\n    // Caveat: We NEED to access NODE_ENV through array accessor, otherwise its mapped into static value by webpack that isnt changable at runtime\n    process.env['NODE_ENV'] === 'production' ||\n    // To reliably detect a prod build, we set variable EDGIO_PRODUCTION_BUILD true in lambdas which users can't change\n    // We can't use isCloud in those cases, as we need to use this function also in local cases\n    process.env[EDGIO_ENV_VARIABLES.productionBuild] === 'true'\n  )\n}\n\n/**\n * Used to determine if the app is running in `edgio run` development environment\n * @returns `true` when running with `edgio run`without production flag, `false` otherwise\n */\nexport function isEdgioRunDev(): boolean {\n  return !isCloud() && !isProductionBuild()\n}\n\n/**\n * Determines whether or not we are running in a browser\n * @returns `true` when running in a browser, otherwise false\n */\nexport function isBrowser() {\n  return typeof window !== 'undefined'\n}\n"],
  "mappings": "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",
  "names": ["LogLevel", "querystring", "key", "key", "key", "http", "body"]
}
