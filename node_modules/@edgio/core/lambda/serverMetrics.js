"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.metrics = void 0;
const idUtils_1 = require("../utils/idUtils");
const constants_1 = require("../constants");
/**
 * Object with the metrics for the current server.ts instance
 */
exports.metrics = {
    // Generate a unique ID for this server instance
    // right after the server is started.
    serverId: (0, idUtils_1.generateRandomId)(),
    // Handler ID - The unique ID of the parent process handler.ts
    _handlerId: undefined,
    get handlerId() {
        // Return extracted handlerId if it's already set
        if (this._handlerId)
            return this._handlerId;
        // Extract handlerId from process.argv passed by parent process
        process.argv.find(arg => {
            var _a;
            return (this._handlerId = (_a = arg.match(/^--handler-id=(.+)$/)) === null || _a === void 0 ? void 0 : _a[1]);
        });
        this._handlerId = this._handlerId || 'UNKNOWN_HANDLER_ID';
        return this._handlerId;
    },
    // Times
    appStartedAt: undefined,
    appReadyAt: undefined,
    // Counters
    serverErrorCount: 0,
    // The value of the Via req header,
    // that will be injected into every upstream request made by fetch, axios, etc...
    // Locally, it's just set to 'Edgio Core' by default.
    // In Lambda, it's set to the value of the Via header from the original incoming request.
    // This allows us to track the request path through the system and detect loops.
    // NOTE: Every lambda can process only single request at a time, this value is always up-to-date.
    via: constants_1.EDGIO_VIA_HEADER_VALUE,
    // Calculates durations
    get appReadyTime() {
        return this.appReadyAt && this.appStartedAt ? this.appReadyAt - this.appStartedAt : 0;
    },
    get serverRss() {
        const { rss } = process.memoryUsage();
        return Math.round((rss / 1024 / 1024) * 100) / 100;
    },
    // Returns the serialized metrics
    serialize() {
        const shortcuts = {
            // Server ID - The unique ID of this server instance.
            sid: this.serverId,
            // App ready time - The time in ms it took to start the app.
            art: this.appReadyTime,
            // Server Memory RSS - The total memory in MiB occupied by the code segment, heap and stack of this process
            srss: this.serverRss,
            // Server Error Count - The total number of errors this server instance has encountered.
            sec: this.serverErrorCount,
        };
        return Object.entries(shortcuts)
            .map(([key, value]) => `${key}=${value}`)
            .join(',');
    },
};
