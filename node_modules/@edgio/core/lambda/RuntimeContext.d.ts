import Config from '../config';
import { RuntimeObjects } from './RuntimeObjects';
import { RuntimeOptions } from './RuntimeOptions';
import { Rules } from '../types';
export declare const getRuntime: () => RuntimeContext;
/**
 * A runtime class that is responsible for loading and reloading all the external resources
 * and creating runtime objects (config, router, propertyContext, cache) from them. It also ensures
 * that all the external resources are available only after the app is started and all the resources
 * are loaded.
 */
export declare class RuntimeContext {
    runtimeOptions: RuntimeOptions;
    constructor(runtimeOptions: RuntimeOptions);
    private appStartedPromise;
    private reloadPromise;
    private watchers;
    get isDevMode(): boolean;
    /**
     * Waits for the runtime to be ready and returns RuntimeObjects. The runtime is collection of external resources,
     * like file system (routes.js, edgio.config.js) and node server (dev.js, prod.js).
     * This method waits for all these resources to be ready, and then returns them.
     *
     * @returns runtime objects (config, router, propertyContext, cache),
     * that are constructed from files in the file system
     */
    waitForRuntime(): Promise<RuntimeObjects>;
    private reload;
    static withOrigins(config: Config, origins: any[]): Config;
    static withEdgeFunctions(config: Config, rules: Rules[]): Config;
    private setWatchers;
    private clearWatchers;
    private resetWatchers;
    private startApp;
}
/**
 * Returns the runtime options
 * for the production mode
 * @returns
 */
export declare const getProdRuntimeOptions: () => RuntimeOptions;
/**
 * Returns the runtime options
 * for the development mode
 * @returns
 */
export declare const getDevRuntimeOptions: () => RuntimeOptions;
