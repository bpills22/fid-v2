/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * The web server's hostname or IP address. IPv6 addresses must be enclosed with brackets.
 */
export type OriginHostname = string;
/**
 * The response's HTTP status code.
 */
export type HttpStatusCode = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 226 | 300 | 301 | 302 | 304 | 305 | 306 | 307 | 308 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 421 | 422 | 423 | 424 | 425 | 426 | 428 | 429 | 431 | 440 | 444 | 451 | 499 | 500 | 501 | 502 | 503 | 504 | 505 | 506 | 507 | 508 | 509 | 510 | 511 | 530 | 531 | 532 | 533 | 534 | 535 | 536 | 537 | 538 | 539 | 540 | 541 | 542 | 543 | 544 | 545 | 546 | 547 | 548 | 549 | 888 | 893;
/**
 * The hostname that will be served through our network.
 */
export type Hostname = string;
export type Rules = Matches | Features | Features[];
export type DeviceAttributes = 'device_os' | 'brand_name' | 'dual_orientation' | 'html_preferred_dtd' | 'image_inlining' | 'is_android' | 'is_app' | 'is_full_desktop' | 'is_ios' | 'is_robot' | 'is_smartphone' | 'is_smarttv' | 'is_tablet' | 'is_touchscreen' | 'is_windows_phone' | 'is_wireless_device' | 'marketing_name' | 'mobile_browser' | 'model_name' | 'progressive_download' | 'release_date' | 'resolution_height' | 'resolution_width';
export type EdgeFunction = EdgeFunctionPath | EdgeFunctionObject;
/**
 * Path to a file that contains an edge function.
 */
export type EdgeFunctionPath = string;
/**
 * A note that may consist of up to 150 alphanumeric characters.
 */
export type Comment = string;
/**
 * This interface was referenced by `HttpRequestHeader`'s JSON-Schema definition
 * via the `patternProperty` "^[+]?[-_a-zA-Z0-9 .]+$".
 *
 * This interface was referenced by `SetVariables`'s JSON-Schema definition
 * via the `patternProperty` "^[-_a-zA-Z0-9]+$".
 *
 * This interface was referenced by `EnvironmentVariables`'s JSON-Schema definition
 * via the `patternProperty` "^[-_a-zA-Z0-9]+$".
 */
export type SingleLineString = string;
export type GenericField = string;
/**
 * Determines how an edge server will handle either the `Cache-Control` or `Expires` response header, as determined by the feature being configured, when the `client_max_age` feature is active. `pass` passes the response header from the origin to the client, `overwrite` overwrites the origin's response header, `if_missing` adds the header when it is missing from the origin's response, and `remove` ensures that the header is excluded from the response provided to the client.
 */
export type HeaderTreatment = 'pass' | 'overwrite' | 'if_missing' | 'remove';
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[1-5][0-9][0-9]$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[1-5][0-9][0-9]$".
 */
export type TimeIntervalNegative = string;
export type HeaderName = string;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[1-5][0-9][0-9]$".
 */
export type TimeInterval = string;
export interface HttpsApiVdmsIoCdnEdgeControlV1ConfigurationSchema {
    /**
     * @minItems 1
     */
    properties: [Property, ...Property[]];
    rules?: Rules[];
    rtld?: Rtld;
    experiments?: Experiments[];
    experiments_settings?: ExperimentsSettings;
}
export interface Property {
    name: string;
    /**
     * @minItems 1
     * @maxItems 10000
     */
    origins: [Origins, ...Origins[]];
    /**
     * @minItems 1
     */
    hostnames: [Hostnames, ...Hostnames[]];
    rules?: Rules[];
    edge_functions?: EdgeFunctions;
    environment_variables?: EnvironmentVariables;
    redirects?: Redirects;
}
/**
 * A list of origin configurations. Each origin configuration defines how Edgio may communicate with your web server(s).
 */
export interface Origins {
    /**
     * The origin configuration's name.
     */
    name?: string;
    /**
     * The only valid value is `customer_origin`.
     */
    type?: 'customer_origin' | 'cdn_storage';
    /**
     * A list of host(s). Each host determines how Edgio will communicate with your web server(s).
     */
    hosts?: OriginBackends[];
    /**
     * The method through which Edgio load balances traffic proxied from our network to an origin configuration's hosts. Valid values are: `primary_failover` and `round_robin`.
     */
    balancer?: 'primary_failover' | 'round_robin' | 'carp' | 'carp64' | 'static_with_tags' | 'static_weighted' | 'static_nocache_bypass' | 'sqf';
    /**
     * Overrides the client's `Host` header for requests proxied to this origin.
     */
    override_host_header?: string;
    /**
     * The origin's Origin Shield configuration.
     */
    shields?: {
        /**
         * Reserved for future use.
         */
        global?: string;
        /**
         * The code for the Origin Shield POP that will be assigned to the Asia-Pacific (APAC) region. Omit this property or set it to blank to proxy requests to a configured region that provides the lowest round-trip time (RTT). Set to `bypass` to forward all requests from this region to the origin.
         */
        apac?: string;
        /**
         * The code for the Origin Shield POP that will be assigned to the Europe, Middle East, and Africa (EMEA) region. Omit this property or set it to blank to proxy requests to a configured region that provides the lowest round-trip time (RTT). Set to `bypass` to forward all requests from this region to the origin.
         */
        emea?: string;
        /**
         * The code for the Origin Shield POP that will be assigned to the Western United States region. Omit this property or set it to blank to proxy requests to a configured region that provides the lowest round-trip time (RTT). Set to `bypass` to forward all requests from this region to the origin.
         */
        us_west?: string;
        /**
         * The code for the Origin Shield POP that will be assigned to the Eastern United States region. Omit this property or set it to blank to proxy requests to a configured region that provides the lowest round-trip time (RTT). Set to `bypass` to forward all requests from this region to the origin.
         */
        us_east?: string;
    };
    /**
     * Determines whether Origin Shield will be restricted to Payment Card Industry (PCI)-certified locations.
     */
    pci_certified_shields?: boolean;
    /**
     * TLS settings.
     */
    tls_verify?: {
        /**
         * Determines whether Edgio will send a Server Name Indication (SNI) hint to your origin server during the TLS handshake.
         */
        use_sni?: boolean;
        sni_hint_and_strict_san_check?: OriginHostname;
        /**
         * Determines whether to allow Edgio to serve traffic when it detects a self-signed certificate.
         */
        allow_self_signed_certs?: boolean;
        /**
         * The SHA-1 digest for the public key of your end-entity (i.e., leaf) certificate.
         *
         * @maxItems 5
         */
        pinned_certs?: [] | [string] | [string, string] | [string, string, string] | [string, string, string, string] | [string, string, string, string, string];
    };
    /**
     * Retrying certain status codes
     */
    retry?: {
        /**
         * Defines the retryable status codes.
         */
        status_codes: HttpStatusCode[];
        /**
         * Ignore the Retry-After origin response header.
         */
        ignore_retry_after_header?: boolean;
        /**
         * The number of seconds that our edge servers will wait before retry.
         */
        after_seconds?: number;
        /**
         * Maximum number of request retries.
         */
        max_requests: number;
        /**
         * The maximum number of seconds that our edge servers will wait before retry.
         */
        max_wait_seconds: number;
    };
}
/**
 * A host determines how Edgio will communicate with your web server(s).
 */
export interface OriginBackends {
    /**
     * Reserved for future use.
     */
    weight?: number;
    /**
     * Reserved for future use.
     */
    dns_max_ttl?: number;
    /**
     * The method for resolving the hostname(s) associated with an origin configuration. `prefv4` and `prefv6` define an IP preference, while `onlyv4` and `onlyv6` restrict hostname resolution to a specific IP version.
     */
    dns_preference?: 'prefv4' | 'prefv6' | 'onlyv4' | 'onlyv6';
    /**
     * Reserved for future use.
     */
    max_hard_pool?: number;
    /**
     * Reserved for future use.
     */
    dns_min_ttl?: number;
    location: [] | [
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        }
    ] | [
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        }
    ] | [
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        }
    ] | [
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        }
    ] | [
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        }
    ] | [
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        }
    ] | [
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        }
    ] | [
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        }
    ] | [
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        }
    ] | [
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        },
        {
            /**
             * The port on which Edgio will communicate with the web server(s) defined within the `hostname` property.
             */
            port?: number;
            hostname: OriginHostname;
        }
    ] | [] | [OriginHostname] | [OriginHostname, OriginHostname] | [OriginHostname, OriginHostname, OriginHostname] | [OriginHostname, OriginHostname, OriginHostname, OriginHostname] | [OriginHostname, OriginHostname, OriginHostname, OriginHostname, OriginHostname] | [
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname
    ] | [
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname
    ] | [
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname
    ] | [
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname
    ] | [
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname,
        OriginHostname
    ] | OriginHostname;
    /**
     * Reserved for future use.
     */
    max_pool?: number;
    /**
     * Reserved for future use.
     */
    balancer?: 'carp' | 'sqf' | 'primary_failover' | 'round_robin';
    /**
     * Send traffic to your hosts over HTTPS, HTTP, or to match the client’s scheme.
     */
    scheme?: 'http' | 'https' | 'match';
    /**
     * Overrides the client's `Host` header for requests proxied to this origin backend.
     */
    override_host_header?: string;
}
/**
 * A list of domains through which your site will be served.
 */
export interface Hostnames {
    hostname: Hostname;
    /**
     * The name of the origin configuration assigned to this hostname.
     */
    default_origin_name?: string;
    /**
     * Reserved for future use.
     */
    report_code?: number;
    /**
     * Reserved for future use.
     */
    tls?: {
        npn?: boolean;
        alpn?: boolean;
        protocols?: string;
        use_sigalgs?: boolean;
        sni?: boolean;
        sni_strict?: boolean;
        sni_host_match?: boolean;
        client_renegotiation?: boolean;
        options?: string;
        cipher_list?: string;
        named_curve?: string;
        oscp?: boolean;
        pem?: string;
        ca?: string;
    };
    /**
     * Optional directory path.
     */
    directory?: string;
}
export interface Matches {
    /**
     * @minItems 2
     */
    if?: [
        Matches | Boolean | Conditionals | Features | (Features | Matches)[],
        Matches | Boolean | Conditionals | Features | (Features | Matches)[],
        ...(Matches | Boolean | Conditionals | Features | (Features | Matches)[])[]
    ];
    comment?: Comment;
}
export interface Boolean {
    /**
     * @minItems 2
     *
     * This interface was referenced by `Boolean`'s JSON-Schema definition
     * via the `patternProperty` "^(or|and)$".
     */
    [k: string]: [Boolean | Conditionals, Boolean | Conditionals, ...(Boolean | Conditionals)[]];
}
export interface Conditionals {
    /**
     * @minItems 2
     * @maxItems 2
     *
     * This interface was referenced by `Conditionals`'s JSON-Schema definition
     * via the `patternProperty` "^(==|!=|===|!==)$".
     * @minItems 2
     * @maxItems 3
     *
     * This interface was referenced by `Conditionals`'s JSON-Schema definition
     * via the `patternProperty` "^(<|<=)$".
     * @minItems 2
     * @maxItems 2
     *
     * This interface was referenced by `Conditionals`'s JSON-Schema definition
     * via the `patternProperty` "^(>|>=)$".
     * @minItems 2
     *
     * This interface was referenced by `Conditionals`'s JSON-Schema definition
     * via the `patternProperty` "^(in|not_in)$".
     * @minItems 2
     *
     * This interface was referenced by `Conditionals`'s JSON-Schema definition
     * via the `patternProperty` "^(=~|!~)$".
     */
    [k: string]: [(number | string | boolean) | RulesVariables, (number | string | boolean) | RulesVariables] | [RulesVariables | number, RulesVariables | number] | [RulesVariables | number, RulesVariables | number, RulesVariables | number] | [RulesVariables | number, RulesVariables | number] | [
        RulesVariables | (string | unknown[]),
        RulesVariables | (string | unknown[]),
        ...(RulesVariables | (string | unknown[]))[]
    ] | [
        RulesVariables | (string | number),
        RulesVariables | (string | number),
        ...(RulesVariables | (string | number))[]
    ];
}
export interface RulesVariables {
    request?: 'client_ip' | 'referring_domain' | 'method' | 'scheme' | 'origin_path' | 'origin_query_string' | 'pop_code' | 'path' | 'query' | 'querystring';
    'request.path'?: 'directory' | 'filename' | 'extension';
    'request.origin_query'?: string;
    'request.cookie'?: string;
    'request.header'?: string;
    random?: number;
    location?: 'asn' | 'city' | 'continent' | 'country' | 'dma_code' | 'latitude' | 'longitude' | 'postal_code' | 'region_code' | 'metro_code';
    variable?: 'cache_status' | 'content_length' | 'country_code' | 'geo_country' | 'geo_region' | 'host' | 'http_x_forwarded_host' | 'is_origin_shield' | 'is_subrequest' | 'matched_origin_name' | 'matched_property_index' | 'popcode' | 'query_string' | 'request_uri' | 'resp_age' | 'resp_content_type' | 'resp_edgecast_control' | 'resp_location' | 'resp_set_cookie' | 'resp_transfer_encoding' | 'resp_vary' | 'resp_x_cache' | 'status' | 'uri' | 'usrvar_enable_debug' | 'usrvar_enable_options_resp' | 'usrvar_enable_sf_debug' | 'usrvar_options' | 'virt_dst_addr' | 'virt_http_version' | 'wurfl_cap_brand_name' | 'wurfl_cap_device_os_version' | 'wurfl_cap_marketing_name' | 'wurfl_cap_resolution_height' | 'wurfl_vcap_is_ios';
    pop_code?: string;
    device?: DeviceAttributes;
    response?: 'status_code';
    mtls?: 'client_certificate_verified';
}
export interface Features {
    edge_function?: EdgeFunction;
    comment?: Comment;
    access?: Access;
    caching?: Caching;
    response?: Response;
    headers?: Headers;
    logs?: Logs;
    origin?: Origin;
    url?: Url;
    client?: Client;
    set_variables?: SetVariables;
    mtls?: Mtls;
    nel?: Nel;
}
export interface EdgeFunctionObject {
    js_path?: EdgeFunctionPath;
    version?: number;
    [k: string]: unknown;
}
/**
 * Control access to content.
 */
export interface Access {
    /**
     * Determines whether requests are rejected with a `403 Forbidden` response.
     */
    deny_access?: boolean;
    token_auth_denial_code?: HttpResponseNoBody;
    /**
     * Determines whether URL comparisons made by the following Token-Based Authentication parameters are case-sensitive: `ec_url_allow`, `ec_ref_allow`, `ec_ref_deny`.
     */
    token_auth_ignore_url_case?: boolean;
    /**
     * Determines whether Token-Based Authentication will be applied to a request.
     */
    token_auth?: boolean;
    token_auth_parameter?: GenericField;
    token_auth_keys?: {
        primary?: string;
        primary_min_version?: 'v2' | 'v3';
        backup?: string;
        backup_min_version?: 'v2' | 'v3';
    };
    [k: string]: unknown;
}
/**
 * Determines the type of response that will be returned to a user when a request is denied access due to Token-Based Authentication.
 */
export interface HttpResponseNoBody {
    code?: HttpStatusCode;
    headers?: HttpResponseHeader;
}
/**
 * Response headers.
 */
export interface HttpResponseHeader {
    /**
     * This interface was referenced by `HttpResponseHeader`'s JSON-Schema definition
     * via the `patternProperty` "^[+]?[-_a-zA-Z0-9 .]+$".
     * This interface was referenced by `HttpResponseHeader`'s JSON-Schema definition
     * via the `patternProperty` "^(Accept-Ranges|Age|Connection|Content-Encoding|Content-Length|Content-Range|Date|Server|Trailer|Transfer-Encoding|Upgrade|Vary|Via|Warning|X-EC.*)$".
     */
    [k: string]: (SingleLineString | RulesVariables) | null;
}
/**
 * Customize how and when content is cached.
 */
export interface Caching {
    /**
     * Throttles the bandwidth for the response provided by our edge servers.
     */
    bandwidth_throttling?: {
        /**
         * The maximum bandwidth (Kb per second) that may be used to deliver the response.
         */
        kbytes_per_sec: number;
        /**
         * The number of seconds that our edge servers will wait until throttling bandwidth.
         */
        prebuf_seconds?: number;
        execute_on_shield?: boolean;
    };
    /**
     * Determines whether our CDN will honor your caching policy when determining whether requests should be cached.
     */
    bypass_cache?: boolean;
    /**
     * Controls the generation of `Cache-Control` headers by an edge server when the `client_max_age` feature is active.
     */
    cache_control_header_treatment?: HeaderTreatment | {
        value: HeaderTreatment;
        execute_on_shield: boolean;
    };
    /**
     * Determines how an edge server will handle the `Expires` response header when the `client_max_age` feature is active. This feature overrides the `Expires` header generated by the `client_max_age` feature.
     */
    expires_header_treatment?: HeaderTreatment | {
        value: HeaderTreatment;
        execute_on_shield: boolean;
    };
    /**
     * Determines the max-age interval for browser to edge server cache revalidation. In other words, the amount of time that will pass before a browser can check for a new version of an asset from an edge server.
     */
    client_max_age?: TimeIntervalNegative | {
        value: TimeIntervalNegative;
        execute_on_shield: boolean;
    };
    /**
     * Determines whether the cache key will include or exclude query string parameters associated with a request.
     */
    cache_key_query_string?: {
        /**
         * Includes all query string parameters within the cache key. A unique cache key will be created for each request to an asset that includes a unique query string.
         */
        include_all?: boolean;
        /**
         * Excludes all query string parameters from the cache key.
         */
        exclude_all?: boolean;
        /**
         * The set of query string parameter(s) that may be included in the cache key.
         */
        include?: string[];
        /**
         * The set of query string parameter(s) that will be excluded from the cache key. All other query string parameters can be included in the cache key.
         */
        include_all_except?: string[];
    };
    cache_key_rewrite?: RegexRewrite;
    /**
     * Customizes the cache key through query string parameters, request headers, cookies, and custom metadata.
     */
    cache_key?: {
        /**
         * A unique cache key will be created for each request to an asset that includes a unique query string.
         */
        include_all_query_params?: boolean;
        /**
         * All query string parameters will be excluded from the cache key.
         */
        exclude_all_query_params?: boolean;
        /**
         * Contains the set of parameter(s) that may be included in the cache key. A unique cache key will be generated for each request that contains a unique value for a query string parameter defined in this feature.
         *
         * @minItems 1
         */
        include_query_params?: [string, ...string[]];
        /**
         * Contains the set of parameter(s) will be excluded from the cache key. All other query string parameters will be included in the cache key.
         *
         * @minItems 1
         */
        include_all_query_params_except?: [string, ...string[]];
        /**
         * Contains the set of request header(s) that may be included in the cache key.
         *
         * @minItems 1
         */
        include_headers?: [HeaderName, ...HeaderName[]];
        /**
         * Contains the set of cookie(s) that may be included in the cache key.
         *
         * @minItems 1
         */
        include_cookies?: [HeaderName, ...HeaderName[]];
        /**
         * Contains custom content that may be included in the cache key. This content may consist of static text and feature variables.
         *
         * @minItems 1
         */
        include_expressions?: [SingleLineString, ...SingleLineString[]];
        /**
         * Determines whether the cache key will include the hostname.
         */
        include_hostname?: true;
    };
    max_age?: string | {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[1-5][0-9][0-9]$".
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[1-5][0-9][0-9]$".
         */
        [k: string]: TimeIntervalNegative;
    };
    default_internal_max_age?: string | {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[1-5][0-9][0-9]$".
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[1-5][0-9][0-9]$".
         */
        [k: string]: TimeIntervalNegative;
    };
    /**
     * Reserved for future use.
     */
    h264_support?: string[];
    /**
     * Reserved for future use.
     */
    h264_support_video_seek_params?: {
        seek_start: GenericField;
        seek_end?: GenericField;
    };
    /**
     * Determines whether an HTTP client’s no-cache requests will be forwarded to the origin server. A no-cache request occurs when the HTTP client sends a `Cache-Control:no-cache`, `Pragma:no-cache header`, or both in the HTTP request.
     */
    honor_no_cache_request_header?: boolean;
    /**
     * Determines on a per HTTP status code basis whether our CDN will ignore `Cache-Control: private`, `Cache-Control: no-store`, `Cache-Control: no-cache`, and `Pragma: no-cache` cache directives served from an origin server.
     */
    ignore_origin_no_cache?: HttpStatusCode[];
    /**
     * Determines the response that will be returned to clients when a request generates a `416 Requested Range Not Satisfiable` status code. By default, this status code is returned when the specified byte-range request cannot be satisfied by an edge server and an `If-Range` request header field was not specified.
     */
    ignore_unsatisfiable_ranges?: boolean;
    revalidate_after_origin_unavailable?: string | {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[1-5][0-9][0-9]$".
         */
        [k: string]: TimeInterval;
    };
    /**
     * Defines the minimum file size (bytes) for caching partial content.
     */
    partial_cache_sharing_min_hit_size?: number;
    /**
     * Determines whether cached content will be eligible for early revalidation before its TTL expires. Define the amount of time prior to the expiration of the requested content’s TTL during which it will be eligible for early revalidation.
     */
    prevalidate_cached_content?: string;
    /**
     * Determines how an HTTP client’s request for a 0-byte cache asset is handled by our edge servers.
     */
    refresh_zero_byte_cache_files?: boolean;
    /**
     * Defines the set of status codes that can result in cached content.
     */
    cacheable_status_codes?: HttpStatusCode[];
    /**
     * Determines whether expired cached content will be delivered when an error occurs during cache revalidation or when retrieving the requested content from an origin server.
     */
    stale_on_error?: boolean;
    /**
     * Improves performance by allowing our edge servers to serve stale content while revalidation takes place.
     */
    stale_while_revalidate?: string;
    /**
     * Determines whether `POST` and `PUT` requests are eligible for caching on our network.
     */
    enable_caching_for_methods?: ('GET' | 'POST' | 'PUT')[];
    /**
     * Restricts caching to requests whose body does not exceed the specified file size.
     */
    cacheable_request_body_size?: string;
    /**
     * Determines how often, in seconds, the system will attempt to connect to an unavailable origin server.
     */
    revalidate_while_stale_timer?: number;
    /**
     * Determines whether our CDN will instruct the client to bypass cache. Sets the `cache-control` response header to: `cache-control: private, no-cache, no-store, must-revalidate`.
     */
    bypass_client_cache?: boolean | {
        value: boolean;
        execute_on_shield: boolean;
    };
    /**
     * Set the amount of time that must pass before a browser can check for a new version of a prefetched request. Specifically, it determines the max-age interval for the Prefetch service worker to edge server cache revalidation.
     */
    service_worker_max_age?: string;
    /**
     * Reserved for future use.
     */
    allow_empty_query_in_cache_key?: boolean;
    /**
     * Reserved for future use.
     */
    first_hit_caching?: boolean;
    /**
     * Tunes your caching configuration to optimize performance for live streams and to reduce the load on the origin server.
     */
    streaming_optimization?: boolean;
    /**
     * Tunes your caching configuration to add cache tags / surrogate key for purging purposes.
     *
     * @minItems 1
     * @maxItems 10
     */
    purge_tags?: [string] | [string, string] | [string, string, string] | [string, string, string, string] | [string, string, string, string, string] | [string, string, string, string, string, string] | [string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string];
    [k: string]: unknown;
}
/**
 * Advanced. Rewrites the default cache key for a set of requests.
 */
export interface RegexRewrite {
    /**
     * Identify the set of requests that will use a different default cache key by setting this option to a relative URL path that starts directly after the hostname. This setting supports regular expression syntax.
     */
    source?: string;
    /**
     * Define a replacement pattern that sets a new default cache key.
     */
    destination?: string;
}
/**
 * Contains features that manipulate the response sent to the client.
 */
export interface Response {
    set_status_code?: HttpStatusCode | SingleLineString;
    /**
     * Determines whether to prevent the request from being proxied from our network to an origin server.
     */
    set_done?: boolean;
    /**
     * A custom response body defined as a base-64 encoded string. Our servers decode this string before providing the response to the client.
     */
    set_response_body?: string;
    /**
     * Determines whether prefetching will be allowed for cache misses.
     */
    allow_prefetching_uncached_content?: boolean;
    /**
     * Defines the set of media types (aka content type) that are eligible for edge server compression.
     */
    compress_content_types?: string[];
    /**
     * Determines whether Image Optimizer will be allowed to process or generate an image for eligible requests.
     */
    optimize_images?: boolean;
    /**
     * Reserved for future use.
     */
    retry_from_hostname?: string;
}
/**
 * Add, modify, or delete headers from the request or response.
 */
export interface Headers {
    /**
     * Determines whether a response may include debug cache response headers. These response headers provide information on the cache policy for the requested asset.
     */
    debug_header?: boolean;
    /**
     * if enabled our CDN service will generate an Age header and include it within the response.
     */
    age_response_header?: boolean;
    set_request_headers?: HttpRequestHeader | {
        headers: HttpRequestHeader;
        execute_on_shield: boolean;
    };
    set_response_headers?: HttpResponseHeader | {
        headers: HttpResponseHeader;
        execute_on_shield: boolean;
    };
    add_response_headers?: HttpResponseHeader | {
        headers: HttpResponseHeader;
        execute_on_shield: boolean;
    };
    /**
     * Adds a custom request header that identifies the requesting client by IP address.
     */
    set_client_ip_custom_header?: string;
    remove_response_headers?: string[] | {
        headers: string[];
        execute_on_shield: boolean;
    };
    /**
     * Deletes one or more custom header(s) from the response provided by an origin server.
     */
    remove_origin_response_headers?: string[];
    /**
     * Reserved for future use.
     */
    server_timing_header?: boolean;
    set_origin_response_headers?: HttpResponseHeader;
    [k: string]: unknown;
}
/**
 * Set, overwrite, append, or delete one or more header(s) from the request. Prepend a `+` symbol to the header name to append to the header value. Set the value to blank to delete the header.
 */
export interface HttpRequestHeader {
    /**
     * This interface was referenced by `HttpRequestHeader`'s JSON-Schema definition
     * via the `patternProperty` "^[+]?[-_a-zA-Z0-9 .]+$".
     *
     * This interface was referenced by `SetVariables`'s JSON-Schema definition
     * via the `patternProperty` "^[-_a-zA-Z0-9]+$".
     *
     * This interface was referenced by `EnvironmentVariables`'s JSON-Schema definition
     * via the `patternProperty` "^[-_a-zA-Z0-9]+$".
     * This interface was referenced by `HttpRequestHeader`'s JSON-Schema definition
     * via the `patternProperty` "^(Forwarded-For|Host|Vary|Via|Warning|X-Forwarded-For|X-EC.*)$".
     */
    [k: string]: SingleLineString | null;
}
/**
 * Customize how log data is stored.
 */
export interface Logs {
    /**
     * Determines the value that will be assigned to RTLD’s custom log field. Add a request header's value using this syntax: `%{<REQUEST HEADER>}i` (e.g., `%{Accept-Encoding}i`). Add a response header's value using this syntax: `%{<RESPONSE HEADER>}o` (e.g., `%{Content-Type}o`).
     */
    custom_log_field_format?: string;
    /**
     * Determines whether a query string will be stored along with the URL in access logs. This feature does not apply to requests whose URL does not contain a query string.
     */
    log_query_string?: boolean;
    /**
     * Masks the client’s subnet for logging and reporting purposes.
     */
    mask_client_subnet?: boolean;
    custom_field?: string;
    [k: string]: unknown;
}
/**
 * Control how the CDN communicates with an origin server.
 */
export interface Origin {
    /**
     * Defines the maximum number of requests for a `Keep-Alive` connection before it is closed.
     */
    max_keep_alive_requests?: number;
    /**
     * Reserved for future use.
     */
    proxy_special_headers?: GenericField[];
    /**
     * Defines the origin configuration to which requests will be forwarded when they cannot be served from cache.
     */
    set_origin?: string;
    origin_failover_codes?: HttpStatusCode[];
    /**
     * Sets a limit (in seconds) on when to close a connection after an idle period of reading data from the proxy connection.
     */
    read_idle_timeout?: number;
    [k: string]: unknown;
}
/**
 * Redirect or rewrite requests to a different URL.
 */
export interface Url {
    /**
     * Determines whether requests may be redirected to the hostname defined in the `Location` header returned by an origin server.
     */
    follow_redirects?: boolean;
    /**
     * Rewrites the request URL.
     */
    url_rewrite?: {
        /**
         * A relative path that identifies the requests that will be rewritten. This relative path starts directly after the hostname.
         */
        source?: string;
        /**
         * A replacement pattern that sets a new relative path. This relative path starts directly after the hostname.
         */
        destination?: string;
        /**
         * Determines whether the `source` property is a relative path that supports named parameters (e.g., :productId) or a regular expression.
         */
        syntax?: 'regexp' | 'path-to-regexp';
    }[];
    /**
     * Redirects requests according to the `Location` header.
     */
    url_redirect?: {
        code?: HttpStatusCode;
        /**
         * A regular expression that identifies the requests that will be redirected by their relative path. This relative path starts directly after the hostname.
         */
        source?: string;
        /**
         * A replacement pattern for the URL to which the requests identified in the `source` property will be redirected.
         */
        destination?: string;
        /**
         * Determines whether the `source` property is a relative path that supports named parameters (e.g., :productId) or a regular expression.
         */
        syntax?: 'regexp' | 'path-to-regexp';
    };
}
/**
 * Reserved for future use.
 */
export interface Client {
    /**
     * Reserved for future use.
     */
    quic?: boolean;
    [k: string]: unknown;
}
/**
 * Assigns a value to one or more user-defined variable(s) that are passed to your bespoke traffic processing solution. Define each desired variable as a key-value pair.
 */
export interface SetVariables {
    /**
     * This interface was referenced by `HttpRequestHeader`'s JSON-Schema definition
     * via the `patternProperty` "^[+]?[-_a-zA-Z0-9 .]+$".
     *
     * This interface was referenced by `SetVariables`'s JSON-Schema definition
     * via the `patternProperty` "^[-_a-zA-Z0-9]+$".
     *
     * This interface was referenced by `EnvironmentVariables`'s JSON-Schema definition
     * via the `patternProperty` "^[-_a-zA-Z0-9]+$".
     */
    [k: string]: SingleLineString;
}
/**
 * Reserved for future use.
 */
export interface Mtls {
    /**
     * Reserved for future use.
     */
    forward_client_certificate_to_origin?: boolean;
    [k: string]: unknown;
}
export interface Nel {
    /**
     * Used to turn off NEL feature (enabled by default). Checked only in global rules. If at least 1 feature has nel.disabled == true, we disabled it globally, it doesn't matter if the rule containing the feature is true or false.
     */
    disabled?: boolean;
    [k: string]: unknown;
}
export interface EdgeFunctions {
    quickjs_bytecode_base64?: string;
}
export interface EnvironmentVariables {
    /**
     * This interface was referenced by `HttpRequestHeader`'s JSON-Schema definition
     * via the `patternProperty` "^[+]?[-_a-zA-Z0-9 .]+$".
     *
     * This interface was referenced by `SetVariables`'s JSON-Schema definition
     * via the `patternProperty` "^[-_a-zA-Z0-9]+$".
     *
     * This interface was referenced by `EnvironmentVariables`'s JSON-Schema definition
     * via the `patternProperty` "^[-_a-zA-Z0-9]+$".
     */
    [k: string]: SingleLineString;
}
export interface Redirects {
    defaults: {
        statusCode?: HttpStatusCode;
        forwardQueryString?: boolean;
    };
    /**
     * @minItems 1
     * @maxItems 10000
     */
    locations: [RedirectLocation, ...RedirectLocation[]];
}
export interface RedirectLocation {
    from: string;
    to: string;
    statusCode?: HttpStatusCode;
    forwardQueryString?: boolean;
}
export interface Rtld {
    /**
     * @minItems 1
     */
    custom_request_headers?: [string, ...string[]];
    /**
     * @minItems 1
     */
    custom_response_headers?: [string, ...string[]];
    /**
     * @minItems 1
     */
    custom_cookies?: [string, ...string[]];
}
export interface Experiments {
    id: string;
    name?: string;
    active: boolean;
    criteria?: (Boolean | Conditionals)[];
    /**
     * @minItems 2
     * @maxItems 100
     */
    variants: [Variant, Variant, ...Variant[]];
}
export interface Variant {
    id: string;
    name?: string;
    weight: number;
    features?: Features[];
}
export interface ExperimentsSettings {
    /**
     * Indicates the number of seconds until the experiments cookie expires.
     */
    cookie_max_age?: number;
}
