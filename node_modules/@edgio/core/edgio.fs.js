"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLambdaFs = exports.createEdgioFS = void 0;
const ts_fs_utils_1 = require("ts-fs-utils");
const config_1 = require("./config");
const Router_1 = __importDefault(require("./router/Router"));
// Define how to serialize/deserialize Router from the file system
// so we can easily load it from the ts-fs-utils
const routerSerializer = {
    deserialize: fullPath => {
        // Delete cache, as we don't want to keep old routes in memory,
        // we need to do this as Router.load is using node's require function
        // to resolve the module, and node caches the result of require
        delete require.cache[fullPath];
        return Router_1.default.load(fullPath);
    },
    serialize: (fullPath, router) => {
        throw new Error('Not implemented');
    },
};
// Define how to serialize/deserialize Config from the file system
// so we can easily load it from the ts-fs-utils
const configSerializer = {
    deserialize: fullPath => (0, config_1.getConfigFromFile)(fullPath),
    serialize: (fullPath, config) => {
        throw new Error('Not implemented');
    },
};
/**
 * Creates EdgioFS object that contains all the paths to the files and folders
 * @param appDir Base directory of the app, from this directory we will
 * create all the paths to the files and folders in the app.
 * @returns
 */
const createEdgioFS = (appDir, buildFolder = '.edgio') => new ts_fs_utils_1.AbsoluteFolderName(appDir).with(app => ({
    srcEdgioConfig: app.file('edgio.config.js', configSerializer),
    srcEdgioConfigCjs: app.file('edgio.config.cjs', configSerializer),
    srcRoutes: app.file('routes.js'),
    srcRoutesTs: app.file('routes.ts'),
    edgio: app.folder(buildFolder).with(edgio => ({
        temp: app.folder('tmp'),
        source: edgio.folder('src'),
        s3: edgio.folder('s3'),
        s3Permanent: edgio.folder('s3-permanent'),
        staticAssetsExpiration: edgio.file('static-assets-expiration.json'),
        lambda: (0, exports.createLambdaFs)(edgio.value),
    })),
}));
exports.createEdgioFS = createEdgioFS;
const createLambdaFs = (appDir, lambdaFolderName = 'lambda') => new ts_fs_utils_1.AbsoluteFolderName(appDir).folder(lambdaFolderName).with(lambda => ({
    app: lambda.folder('app'),
    internal: lambda.folder('internal').with(internal => ({
        backend: internal.folder('__backends__').with(backend => ({
            handler: backend.file('__js__.cjs'),
        })),
        config: internal.file('edgio.config.cjs', configSerializer),
        routes: internal.file('routes.cjs', routerSerializer),
        staticAssetManifest: internal.file('static-asset-manifest.json'),
    })),
}));
exports.createLambdaFs = createLambdaFs;
