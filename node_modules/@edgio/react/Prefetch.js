"use strict";
// Indicate that the component is a client-side component
// for React 18 and newer, even though we're targeting React 16
'use client';
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const prop_types_1 = __importDefault(require("prop-types"));
const useIntersectionObserver_1 = __importDefault(require("./useIntersectionObserver"));
const window_1 = require("@edgio/prefetch/window");
const react_merge_refs_1 = __importDefault(require("react-merge-refs"));
/**
 * Generates the URL to prefetch
 * based on the provided URL or the href of the child element.
 */
function getPrefetchURL(url, href) {
    if (typeof url === 'string') {
        return url;
    }
    else if (typeof url === 'function') {
        return url(href);
    }
    else if (typeof __NEXT_DATA__ !== 'undefined' && href) {
        if (href.endsWith('/')) {
            href += 'index';
        }
        return `/_next/data/${__NEXT_DATA__.buildId}${href}.json`;
    }
    else {
        return href;
    }
}
const PrefetchPropTypes = {
    /**
     * Set to true to prefetch the URL immediately when the component mounts.  By default
     * the URL will be prefetched when the component becomes visible.
     */
    immediately: prop_types_1.default.bool,
    /**
     * The URL to prefetch. Or a function that takes the link's target URL and returns the URL to prefetch.
     * If omitted, this component assumes your page uses getServerSideProps and automatically derives the
     * URL based on next.js conventions.
     */
    url: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.func]),
    /**
     * For use with Next.js. Do not use this prop directly. Instead specify the `passHref` prop on the parent
     * `<Link>` element so that Next.js passes this component the value of its `href` or `as` prop.
     */
    href: prop_types_1.default.string,
    /**
     * Prefetch resource as:
     * Default: 'fetch'
     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-as
     */
    prefetchAs: prop_types_1.default.string,
    /**
     * Cross-Origin Resource Sharing option.
     * Possible values: false | 'anonymous' | 'use-credentials'
     */
    cors: prop_types_1.default.oneOf([false, 'anonymous', 'use-credentials']),
    /**
     * The number of seconds the item will be stored in the browser cache.
     * This option overrides the serviceWorkerSeconds option value from routes.js
     */
    maxAgeSeconds: prop_types_1.default.number,
    /**
     * Set to true to send all requests to origin even when they are not in the Edge cache.
     * Default: false
     */
    includeCacheMisses: prop_types_1.default.bool,
    /**
     * Ratio of requests that are sent to origin even when they are not in the Edge cache.
     * Possible values: Number between 0 and 1. Number 0 is equal to 0% requests and 1 to 100% requests sent to origin.
     * Default: 0
     */
    forcePrefetchRatio: prop_types_1.default.number,
};
/**
 * Wrap this component around any `<a>` or Next.js `<Link>` link element to prefetch the data for the linked page
 * when the link becomes visible.
 *
 * Example:
 *
 * ```js
 *  import { Prefetch } from '@edgio/react'
 *
 *  <Prefetch>
 *    <a href="/p/1">
 *      {product.name}
 *    </a>
 *  </Prefetch>
 * ```
 *
 * When used in Next.js, this component assumes your pages use `getServerSideProps` and
 * automatically derives the URL to prefetch based on Next.js conventions.  If you want to prefetch a
 * different URL, set the `url` prop.
 *
 * Example:
 *
 * ```js
 *  import { Prefetch } from '@edgio/react'
 *  import Link from 'next/link'
 *
 *  <Link href="/p/[productId]" as={`/p/${product.id}`} passHref>
 *    <Prefetch url={`/api/p/${product.id}`}>
 *      <a>{product.name}</a>
 *    </Prefetch>
 *  </Link>
 * ```
 *
 * When using Next.js, take care to ensure that the anchor element either has an href prop, or the Next Link element
 * has the passHref prop so that the Prefetch element knows which URL to prefetch.
 *
 * You can also provide a function for the `url` prop to derive the URL to prefetch from
 * the link's `href`.  For example:
 *
 * ```js
 *  import { Prefetch } from '@edgio/react'
 *
 *  <Prefetch url={href => `/api${href}`}>
 *    <a href="/p/1">{product.name}</a>
 *  </Prefetch>
 * ```
 */
const Prefetch = (0, react_1.forwardRef)((_a, incomingRef) => {
    var { url, href, immediately, prefetchAs, cors, maxAgeSeconds, includeCacheMisses, forcePrefetchRatio, children } = _a, others = __rest(_a, ["url", "href", "immediately", "prefetchAs", "cors", "maxAgeSeconds", "includeCacheMisses", "forcePrefetchRatio", "children"]);
    // useRef is supported only in client components in React 18
    const ref = (0, react_1.useRef)(null);
    const child = react_1.Children.only(children);
    const childProps = (child === null || child === void 0 ? void 0 : child.props) || {};
    // The child can be 'string', props don't exist on that, but
    // it would return undefined anyway
    // @ts-ignore
    const prefetchUrl = getPrefetchURL(url, (childProps === null || childProps === void 0 ? void 0 : childProps.href) || href);
    (0, useIntersectionObserver_1.default)(() => (immediately ? null : ref), (visible, disconnect) => {
        if (visible) {
            disconnect();
            (0, window_1.prefetch)(prefetchUrl, prefetchAs, {
                cors,
                maxAgeSeconds,
                includeCacheMisses,
                forcePrefetchRatio,
            });
        }
    }, 
    // @ts-ignore
    [prefetchUrl, immediately]);
    (0, react_1.useEffect)(() => {
        if (immediately) {
            (0, window_1.prefetch)(prefetchUrl, prefetchAs, {
                cors,
                maxAgeSeconds,
                includeCacheMisses,
                forcePrefetchRatio,
            });
        }
    }, [url, immediately]);
    // we use react-merge-refs here so that parent elements link Next.js's Link can pass a ref
    // down to the <a> child of this component
    // ts-ignore, possibly undefined, which is fine
    // @ts-ignore
    return (0, react_1.cloneElement)(child, Object.assign(Object.assign(Object.assign({ ref: (0, react_merge_refs_1.default)([incomingRef, ref]) }, others), { href }), child === null || child === void 0 ? void 0 : child.props));
});
// @ts-ignore
Prefetch.propTypes = PrefetchPropTypes;
Prefetch.defaultProps = {
    immediately: false,
};
exports.default = Prefetch;
