"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelativeFileName = void 0;
const RelativeFolderName_1 = require("./RelativeFolderName");
const FileName_1 = require("./FileName");
const normalizePath_1 = require("./utils/normalizePath");
const Envirovment_1 = require("./Envirovment");
/**
 * Relative file name is a file name that can contain parent folder that
 * must be relative folder name or undefined (if file is at the root)
 */
class RelativeFileName {
    constructor(p1, p2) {
        this.value = "";
        if (typeof p1 === "string") {
            const parsed = RelativeFileName.parse(p1);
            this.parent = parsed[0];
            this.name = parsed[1];
        }
        else {
            this.parent = p2;
            this.name = p1;
        }
        this.value = this.parent
            ? `${this.parent.value}/${this.name.value}`
            : this.name.value;
    }
    static from(source) {
        return new RelativeFileName(source);
    }
}
exports.RelativeFileName = RelativeFileName;
RelativeFileName.parse = (name) => {
    if ((0, Envirovment_1.isAbsolutePath)(name))
        throw new Error("RelativeFileName cannot start with slash, did you mean AbsoluteFileName?");
    if (name.endsWith("/"))
        throw new Error("RelativeFileName cannot end with slash, did you mean RelativeFolderName?");
    const normalized = (0, normalizePath_1.normalizePath)(name);
    const lastSlashIndex = normalized.lastIndexOf("/");
    if (lastSlashIndex > -1) {
        const parent = new RelativeFolderName_1.RelativeFolderName(normalized.substring(0, lastSlashIndex));
        const fileName = new FileName_1.FileName(normalized.substring(lastSlashIndex + 1));
        return [parent, fileName];
    }
    else {
        const parent = undefined;
        const fileName = new FileName_1.FileName(normalized);
        return [parent, fileName];
    }
};
