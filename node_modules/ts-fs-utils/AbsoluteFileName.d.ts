import { AbsoluteFolderName } from "./AbsoluteFolderName";
import { FSName } from "./FSName";
import { FileName } from "./FileName";
import { Serializer } from "./serializer/Serializer";
import { SerializerType } from "./serializer/SerializerType";
/**
 * Absolute file name is a file name that starts with slash and can contain parent folder that
 * must be absolute folder name or undefined (if file is at the root)
 */
export declare class AbsoluteFileName<TContent = string> implements FSName {
    constructor(fileName: FileName, parent?: AbsoluteFolderName, type?: SerializerType | Serializer<TContent>);
    constructor(fileName: string, type?: SerializerType | Serializer<TContent>);
    private contentInternal?;
    private serializer;
    readonly value: string;
    readonly name: FileName;
    readonly parent?: AbsoluteFolderName;
    exists(): boolean;
    delete(ignoreIfNotExists?: boolean): void;
    copyTo(target: AbsoluteFolderName | AbsoluteFileName<TContent>, overwrite?: boolean): void;
    contentReload(): void;
    get content(): TContent;
    write(content: TContent, overwrite?: boolean): void;
    static from<T = string>(source: string): AbsoluteFileName<T>;
    static parse: (name: string) => [AbsoluteFolderName | undefined, FileName];
}
