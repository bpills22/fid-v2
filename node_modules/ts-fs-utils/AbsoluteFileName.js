"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbsoluteFileName = void 0;
const AbsoluteFolderName_1 = require("./AbsoluteFolderName");
const FileName_1 = require("./FileName");
const fs_1 = __importDefault(require("fs"));
const createJsonSerializer_1 = require("./serializer/createJsonSerializer");
const createRawSerializer_1 = require("./serializer/createRawSerializer");
const normalizePath_1 = require("./utils/normalizePath");
/**
 * Absolute file name is a file name that starts with slash and can contain parent folder that
 * must be absolute folder name or undefined (if file is at the root)
 */
class AbsoluteFileName {
    constructor(fileName, p2, p3) {
        if (typeof fileName === "string") {
            const parsed = AbsoluteFileName.parse(fileName);
            this.parent = parsed[0];
            this.name = parsed[1];
            this.serializer = typeof p2 === "object"
                ? p2
                : p2 === "json" ? (0, createJsonSerializer_1.createJsonSerializer)() : (0, createRawSerializer_1.createRawSerializer)();
        }
        else {
            this.parent = p2;
            this.name = fileName;
            this.serializer = typeof p3 === "object"
                ? p3
                : p3 === "json" ? (0, createJsonSerializer_1.createJsonSerializer)() : (0, createRawSerializer_1.createRawSerializer)();
        }
        this.value = this.parent
            ? `${this.parent.value}/${this.name.value}`
            : `/${this.name.value}`;
    }
    // We have several sections here, so we can easily find what we need, unfortunately
    // there are no partail classes in typescript, so we have to use comments
    // ----------------------------------- helpers -----------------------------------
    exists() {
        return fs_1.default.existsSync(this.value);
    }
    delete(ignoreIfNotExists) {
        if (this.exists()) {
            fs_1.default.rmSync(this.value);
            return;
        }
        if (!ignoreIfNotExists)
            throw new Error(`File ${this.value} doesn't exist`);
    }
    copyTo(target, overwrite) {
        if (!this.exists())
            throw new Error(`File ${this.value} doesn't exist`);
        const targetFileName = target instanceof AbsoluteFolderName_1.AbsoluteFolderName
            ? target.file(this.name)
            : target;
        if (targetFileName.exists() && !overwrite)
            throw new Error(`Folder ${target.value} already exists`);
        fs_1.default.copyFileSync(this.value, targetFileName.value);
    }
    // ----------------------------------- content -----------------------------------
    contentReload() {
        this.contentInternal = this.serializer.deserialize(this.value);
    }
    get content() {
        if (this.contentInternal === undefined) {
            if (!this.exists())
                throw new Error(`File '${this.value}' doesn't exist`);
            this.contentInternal = this.serializer.deserialize(this.value);
        }
        return this.contentInternal;
    }
    write(content, overwrite) {
        if (this.exists() && !overwrite)
            throw new Error(`File ${this.value} already exists`);
        this.serializer.serialize(this.value, content);
    }
    // ----------------------------------- parsing -----------------------------------
    static from(source) {
        return new AbsoluteFileName(source);
    }
}
exports.AbsoluteFileName = AbsoluteFileName;
AbsoluteFileName.parse = (name) => {
    if (name.endsWith("/"))
        throw new Error("AbsoluteFileName cannot end with slash, did you mean AbsoluteFolderName?");
    const normalized = (0, normalizePath_1.normalizePath)(name);
    const lastSlashIndex = normalized.lastIndexOf("/");
    const rest = normalized.substring(0, lastSlashIndex);
    const parent = new AbsoluteFolderName_1.AbsoluteFolderName(rest.length === 0 ? "/" : rest);
    const fileName = new FileName_1.FileName(normalized.substring(lastSlashIndex + 1));
    return [parent, fileName];
};
