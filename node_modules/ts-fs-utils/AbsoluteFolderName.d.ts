import { AbsoluteFileName } from "./AbsoluteFileName";
import { FSName } from "./FSName";
import { FileName } from "./FileName";
import { Name } from "./Name";
import { Serializer } from "./serializer/Serializer";
import { SerializerType } from "./serializer/SerializerType";
/**
 * Absolute folder name is a folder name that starts with slash and can contain parent folder that
 * must be absolute folder name or undefined (if folder is at the root)
 */
export declare class AbsoluteFolderName implements FSName {
    constructor(name: Name | string, parent?: AbsoluteFolderName);
    readonly value: string;
    readonly name: Name;
    readonly parent: AbsoluteFolderName | undefined;
    file<TContent = string>(fileName: FileName | string, type?: SerializerType | Serializer<TContent>): AbsoluteFileName<TContent>;
    folder(folderName: Name | string): AbsoluteFolderName;
    with<T extends {}>(children: (name: AbsoluteFolderName) => T): AbsoluteFolderName & T;
    private setChildren;
    exists(): boolean;
    create(ignoreExisting?: boolean): void;
    recreate(): void;
    delete(ignoreIfNotExists?: boolean): void;
    static from(source: string): AbsoluteFolderName;
    static parse: (name: string) => [Name, AbsoluteFolderName | undefined];
}
